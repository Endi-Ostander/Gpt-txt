

===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\config.py =====

# config.py

MEMORY_PATH = "Users/Brazers/Desktop/Endi-IA/P v0.1-rb/data/memory.json"
KNOWLEDGE_PATH = "Users/Brazers/Desktop/Endi-IA/P v0.1-rb/data/knowledge_base.json"
LOG_PATH = "Users/Brazers/Desktop/Endi-IA/P v0.1-rb/data/logs/ai.log"
LOG_LEVEL = "DEBUG"


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\Endi-IA_v0.2_checklist_UPDATED.md =====

# ‚úÖ Endi-IA v0.2 ‚Äî Checklist (–æ–±–Ω–æ–≤–ª—ë–Ω 2025-07-03)

---
## üéØ –¶–µ–ª—å –≤–µ—Ä—Å–∏–∏ v0.2

–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —è–¥—Ä–∞ –ò–ò Endi, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ:
- –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã
- –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏ –∑–Ω–∞–Ω–∏—è
- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è
- –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏
- —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –º—É—Å–æ—Ä
- –≤–µ—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª –º—ã—Å–ª–µ–π

---

## üß± –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

- `core/learner/trainer.py` ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–∞–∑
- `core/memory/memory.py` ‚Äî –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
- `core/learner/curiosity.py` ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–Ω—è—Ç—ã—Ö —Ñ—Ä–∞–∑
- `core/learner/generator.py` ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
- `core/thinker/planner.py` ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π –æ–±—É—á–µ–Ω–∏—è
- `core/thinker/meta_journal.py` ‚Äî –∂—É—Ä–Ω–∞–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
- `core/common/utils.py` ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
- `tools/console.py` ‚Äî –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

---
## üß† –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

- [x] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (STATEMENT)
- [x] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (QUESTION)
- [x] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –≤ `memory.json`
- [x] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –≤ `knowledge_base.json`
- [x] –î–æ–±–∞–≤–ª–µ–Ω `SpellCorrector` (–∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
- [x] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
- [x] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ ‚Äú—è –Ω–µ –∑–Ω–∞—é‚Äù –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
- [x] –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—Ä–∞–∑ (PhraseType)
- [x] –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
- [x] –õ–æ–≥–∏–∫–∞ –ø—Ä–∞–≤–∏–ª –≤ `rules_engine`
- [x] –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π `MetaJournal`
- [x] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ `Curiosity` –≤ `data/curiosity.json`
- [x] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ `Curiosity` –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
- [x] –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ `get_logged_goals()` –≤ `MetaJournal`
- [x] –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è (`/plan`) —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–µ–ø–æ–Ω—è—Ç—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
- [x] –ñ—É—Ä–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (—á–µ—Ä–µ–∑ `literal_eval`)
- [x] –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
- [x] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –≤ `Trainer`

---

## üõ†Ô∏è –ï—â—ë –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –≤ v0.2

- [ ] –ö–æ–º–∞–Ω–¥—ã `/unknowns`, `/clear unknowns`, `/explain <—Ç–µ–º–∞>`
- [ ] –ö–æ–º–∞–Ω–¥–∞ `/cleanup` –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º—É—Å–æ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏
- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (`is_valid_statement`)
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–π —Ñ—Ä–∞–∑–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äú–∫–æ—Ç‚Äù ‚Üí —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å)
- [ ] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ `/goal <—Ü–µ–ª—å>` ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞—Ç—å —Ü–µ–ª—å
- [ ] –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ–≤ (`/export`)
- [ ] –ú–∏–Ω–∏-—Ç–µ—Å—Ç—ã: `test_trainer`, `test_planner`, `test_generator`


---

## üß† –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–∞–∂–Ω–æ—Å—Ç–∏)

1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ—Ä–∞–∑ (–∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è)
2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
3. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ `/plan` –∏ —Ü–µ–ª–µ–π
4. –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (–º—É—Å–æ—Ä–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
5. –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
6. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (`/explain`, `/unknowns`)
7. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∂—É—Ä–Ω–∞–ª–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç

---

## üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ v0.3

–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—Å—è –Ω–∞:
- –í–Ω–µ–¥—Ä–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò (GPT) –≤ —Ä–æ–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
- –ù–∞—á–∞–ª–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≥–∏–ø–æ—Ç–µ–∑ (–º–æ–¥—É–ª—å `hypothesis`)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ ingestion –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ (v0.4)
- –ü–µ—Ä–≤—ã—Ö —à–∞–≥–∞—Ö API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

---

## üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ

- –í–æ–∑–º–æ–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è `/read` –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ (–Ω–∞—á–∏–Ω–∞—è —Å v0.4)
- –ù–∞—á–∞–ª–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (`external_ai.py`)
- –í–≤–µ–¥–µ–Ω–∏–µ –≤–µ—Å–∞ –∏–ª–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ–≤

---
## üß© –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

- `/plan` —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `MetaJournal.get_logged_goals()` –∏ `Curiosity.get_questions()`
- –ü–æ–≤–µ–¥–µ–Ω–∏–µ `/plan` —É—Å—Ç–æ–π—á–∏–≤–æ –∫ –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è –≤–æ–ø—Ä–æ—Å–∞–º
- –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –≤–≤–æ–¥–∞—Ö
- –ñ—É—Ä–Ω–∞–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ `meta_journal.json` –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∑–∞–ø–∏—Å—å



===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\memory_report.md =====

# üß† –ü–∞–º—è—Ç—å –ò–ò

## üìå –§–∞–∫—Ç—ã

- **–≤–æ–¥–∞** ‚Äî *—Å–æ—Å—Ç–æ–∏—Ç –∏–∑* ‚Äî –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥–∞
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è`
  –í—Ä–µ–º—è: `2025-06-25T12:00:00`

- **–¥–µ—Ä–µ–≤—å—è** ‚Äî *–º–æ–≥—É—Ç* ‚Äî –≥–æ—Ä–µ—Ç—å
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–î–µ—Ä–µ–≤—å—è –º–æ–≥—É—Ç –≥–æ—Ä–µ—Ç—å`
  –í—Ä–µ–º—è: `2025-06-25T18:18:49.854477`

- **–¢–µ—Å—Ç** ‚Äî *–µ—Å—Ç—å* ‚Äî –¥–∞–Ω–Ω—ã–µ
  –ò—Å—Ç–æ—á–Ω–∏–∫: `—Ç–µ—Å—Ç`
  –í—Ä–µ–º—è: `2025-06-25T19:26:35.762239`

- **—Å–æ–ª–Ω—Ü–µ** ‚Äî *—ç—Ç–æ* ‚Äî –∑–≤–µ–∑–¥–∞
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–°–æ–ª–Ω—Ü–µ —ç—Ç–æ –∑–≤–µ–∑–¥–∞`
  –í—Ä–µ–º—è: `2025-06-25T19:58:12.328126+00:00`

- **"–°–æ–ª–Ω—Ü–µ"** ‚Äî *"–°–æ–ª–Ω—Ü–µ* ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",
  –ò—Å—Ç–æ—á–Ω–∏–∫: `"–∑–≤–µ–∑–¥—ã"]`
  –í—Ä–µ–º—è: `2025-06-25T20:23:55.058045+00:00`

- **—Ç–µ—Å—Ç** ‚Äî *–µ—Å—Ç—å* ‚Äî –ø—Ä–∏–º–µ—Ä
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-06-28T14:28:37.026743+00:00`

- **—Å–æ–ª–Ω—Ü–µ** ‚Äî *is* ‚Äî —ç—Ç–æ –∑–≤–µ–∑–¥–∞
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-06-30T19:30:09.964193+00:00`

- **–±–ª–∏–º–±–∞–∑–æ–∏–¥** ‚Äî *–∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª* ‚Äî –º–µ—Ç–∞—Å—Ñ–µ—Ä—É
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–±–ª–∏–º–±–∞–∑–æ–∏–¥ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª –º–µ—Ç–∞—Å—Ñ–µ—Ä—É`
  –í—Ä–µ–º—è: `2025-06-30T20:07:54.574359+00:00`

- **–±–ª–∏–º–±–∞–∑–æ–∏–¥** ‚Äî *is* ‚Äî –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª –º–µ—Ç–∞—Å—Ñ–µ—Ä—É
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-06-30T20:07:54.578938+00:00`

- **plan** ‚Äî *is* ‚Äî 
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-06-30T20:08:07.085070+00:00`

- **–∫–æ—Ç** ‚Äî *—ç—Ç–æ* ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–∫–æ—Ç —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ`
  –í—Ä–µ–º—è: `2025-07-03T12:32:31.778092+00:00`

- **–∫–æ—Ç** ‚Äî *is* ‚Äî —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-07-03T12:32:31.856519+00:00`

- **—Å–ª–æ–Ω** ‚Äî *—ç—Ç–æ* ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
  –ò—Å—Ç–æ—á–Ω–∏–∫: `—Å–ª–æ–Ω —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ`
  –í—Ä–µ–º—è: `2025-07-03T12:35:34.397028+00:00`

- **—Å–ª–æ–Ω** ‚Äî *is* ‚Äî —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-07-03T12:35:34.425334+00:00`

- **–≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π** ‚Äî *–∫–æ–ª–ª–∞–ø—Å* ‚Äî 
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π –∫–æ–ª–ª–∞–ø—Å–æ–Ω`
  –í—Ä–µ–º—è: `2025-07-03T12:36:20.909891+00:00`

- **–≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π** ‚Äî *is* ‚Äî –∫–æ–ª–ª–∞–ø—Å
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-07-03T12:36:21.217084+00:00`

- **–∫–æ—Ç** ‚Äî *–∂–∏–≤–æ—Ç–Ω–æ–µ* ‚Äî 
  –ò—Å—Ç–æ—á–Ω–∏–∫: `–∫–æ—Ç –∂–≤0—Ç–Ω–æ–µ`
  –í—Ä–µ–º—è: `2025-07-03T12:38:15.034313+00:00`

- **–∫–æ—Ç** ‚Äî *is* ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-07-03T12:38:15.049804+00:00`

- **—ç–Ω–µ—Ä–≥–∏—è** ‚Äî *—ç—Ç–æ* ‚Äî —Å–∏–ª–∞
  –ò—Å—Ç–æ—á–Ω–∏–∫: `—ç–Ω–µ—Ä–≥–∏—è —ç—Ç–æ —Å–∏–ª–∞`
  –í—Ä–µ–º—è: `2025-07-03T12:56:25.363747+00:00`

- **—ç–Ω–µ—Ä–≥–∏—è** ‚Äî *is* ‚Äî —ç—Ç–æ —Å–∏–ª–∞
  –ò—Å—Ç–æ—á–Ω–∏–∫: `None`
  –í—Ä–µ–º—è: `2025-07-03T12:56:25.372105+00:00`

## üìö –ó–Ω–∞–Ω–∏—è



===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\README.md =====

---

````markdown
# ü§ñ GPT-TXT: –û–±—É—á–∞–µ–º—ã–π –ò–ò (v0.1)

–ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –ò–ò, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –æ–±—É—á–∞—Ç—å—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–Ω–∞–Ω–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Å–º—ã—Å–ª —Ñ—Ä–∞–∑. –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤ (ChatGPT –∏ —Ç.–ø.) ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –∏ –ª–æ–∫–∞–ª—å–Ω–æ.

---

## üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (v0.1)

- üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—Ä–∞–∑ (–≤–æ–ø—Ä–æ—Å—ã, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ)
- üß† –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤/–∑–Ω–∞–Ω–∏–π (–≤ JSON)
- üßπ –û—á–∏—Å—Ç–∫–∞ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
- ‚úçÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫
- üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
- ‚ùì –õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –∑–∞–ø–∏—Å—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑
- üíæ –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏ (`.md`, `.csv`)
- üß™ –ü–æ–∫—Ä—ã—Ç–∏–µ `pytest`: 35 —Ç–µ—Å—Ç–æ–≤, >93% –æ—Ö–≤–∞—Ç–∞

---

## üöÄ –ó–∞–ø—É—Å–∫

### üß† –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è:
```bash
python run.py
````

### üõ† –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å:

```bash
python tools/dev_console_ext.py
```

## üóÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
project_root/
‚îÇ
‚îú‚îÄ‚îÄ run.py                         # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ò–ò (–∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
‚îú‚îÄ‚îÄ config.py                      # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π, —Ä–µ–∑–µ—Ä–≤ –ø–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
‚îÇ
‚îú‚îÄ‚îÄ core/                          # –í—Å—è –ª–æ–≥–∏–∫–∞ –ò–ò
‚îÇ   ‚îú‚îÄ‚îÄ common/                    # –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.py               # –¢–∏–ø—ã (—Ñ—Ä–∞–∑, –∑–Ω–∞–Ω–∏–π, —Ñ–∞–∫—Ç–æ–≤ –∏ —Ç.–ø.)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.py               # –§—É–Ω–∫—Ü–∏–∏: ID, –≤—Ä–µ–º—è, –ø—É—Ç–∏, JSON
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ learner/                   # –ú–æ–¥—É–ª–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º—ã—Å–ª–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ trainer.py             # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rules.py               # –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ curiosity.py           # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ reinforce.py           # –ü–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π (–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ memory/                    # –ü–∞–º—è—Ç—å –ò–ò
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ memory.py              # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ –∑–Ω–∞–Ω–∏—è–º–∏ (JSON)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ processor/                 # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tokenizer.py           # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ classifier.py          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ—Ä–∞–∑—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ parser.py              # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ spellchecker.py        # –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ inputs/                    # –í–≤–æ–¥ –≤–Ω–µ—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚îÇ       ‚îú‚îÄ‚îÄ text_input.py          # –ó–∞–≥–ª—É—à–∫–∞ (–±—É–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
‚îÇ       ‚îî‚îÄ‚îÄ html_scraper.py        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü (BeautifulSoup)
‚îÇ
‚îú‚îÄ‚îÄ tools/                         # –£—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
‚îÇ   ‚îî‚îÄ‚îÄ dev_console_ext.py         # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (/help, /mem –∏ —Ç.–¥.)
‚îÇ
‚îú‚îÄ‚îÄ data/                          # –ü–∞–º—è—Ç—å –∏ –∑–Ω–∞–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ memory.json                # –§–∞–∫—Ç—ã (subject ‚Üí predicate ‚Üí object)
‚îÇ   ‚îî‚îÄ‚îÄ knowledge_base.json        # –ó–Ω–∞–Ω–∏—è (title, content, tags, type)
‚îÇ
‚îú‚îÄ‚îÄ tests/                         # Pytest-—Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
‚îÇ   ‚îú‚îÄ‚îÄ test_tokenizer.py
‚îÇ   ‚îú‚îÄ‚îÄ test_classifier.py
‚îÇ   ‚îú‚îÄ‚îÄ test_memory.py
‚îÇ   ‚îú‚îÄ‚îÄ test_rules.py
‚îÇ   ‚îú‚îÄ‚îÄ test_spellchecker.py
‚îÇ   ‚îú‚îÄ‚îÄ test_utils.py
‚îÇ   ‚îú‚îÄ‚îÄ test_curiosity.py
‚îÇ   ‚îú‚îÄ‚îÄ test_parser.py
‚îÇ   ‚îú‚îÄ‚îÄ test_reinforce.py
‚îÇ   ‚îú‚îÄ‚îÄ test_text_input.py
‚îÇ   ‚îî‚îÄ‚îÄ test_html_scraper.py
‚îÇ
‚îú‚îÄ‚îÄ requirements.txt              # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ (pyspellchecker, pytest –∏ –¥—Ä.)
‚îî‚îÄ‚îÄ README.md                     # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∑–∞–ø—É—Å–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

---

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

```bash
pip install -r requirements.txt
```

### 2. –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–∫—Ä—ã—Ç–∏—è:

```bash
pytest --cov=core tests/
```

---

## üìÖ –ü–ª–∞–Ω—ã –Ω–∞ v0.2+

* üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≥–∏–ø–æ—Ç–µ–∑
* üåê –ê–≤—Ç–æ—Å–±–æ—Ä –∑–Ω–∞–Ω–∏–π —Å —Å–∞–π—Ç–æ–≤
* üß† –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è, –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è, —Å–∏–Ω–æ–Ω–∏–º—ã
* üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏

---

## üë®‚Äçüíª –ê–≤—Ç–æ—Ä

–õ–æ–≥–∏–∫–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–æ–¥—É–ª—å–Ω–æ.

---

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

MIT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Äî –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ GPL –∏–ª–∏ Creative Commons –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏.

```




===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\requirements.txt =====

pyspellchecker
pytest
beautifulsoup4


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\run.py =====

from core.learner.trainer import Trainer
import sys

# –î–ª—è –≤—ã–≤–æ–¥–∞ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ dev_console_ext, 
# –Ω–æ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ç–∏–ª–∏—Ç–Ω—ã–π –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤.

def main():
    trainer = Trainer()
    print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò (–∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /, exit ‚Äî –≤—ã—Ö–æ–¥):")

    while True:
        user_input = input("> ").strip()
        if not user_input:
            continue

        if user_input.startswith("/"):
            parts = user_input[1:].split()
            cmd = parts[0].lower()

            if cmd == "exit":
                break
            elif cmd == "mem":
                if len(parts) == 1:
                    print("‚ùó –£—Ç–æ—á–Ω–∏—Ç–µ: facts, knowledge –∏–ª–∏ export")
                    continue
                subcmd = parts[1].lower()

                if subcmd == "facts":
                    subj = parts[2] if len(parts) > 2 else None
                    # –í—ã–≤–æ–¥ —Ñ–∞–∫—Ç–æ–≤ ‚Äî –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ console –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                    print(f"–í—ã–≤–µ—Å—Ç–∏ —Ñ–∞–∫—Ç—ã –¥–ª—è: {subj or '–≤—Å–µ'} (—Ä–µ–∞–ª–∏–∑—É–π –ª–æ–≥–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ)")
                elif subcmd == "knowledge":
                    tag = parts[2] if len(parts) > 2 else None
                    print(f"–í—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–≥–∞: {tag or '–≤—Å–µ'} (—Ä–µ–∞–ª–∏–∑—É–π –ª–æ–≥–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ)")
                elif subcmd == "export":
                    if len(parts) < 3:
                        print("‚ùó –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: md –∏–ª–∏ csv")
                    elif parts[2] == "md":
                        print("–≠–∫—Å–ø–æ—Ä—Ç –≤ md (—Ä–µ–∞–ª–∏–∑—É–π –ª–æ–≥–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ)")
                    elif parts[2] == "csv":
                        print("–≠–∫—Å–ø–æ—Ä—Ç –≤ csv (—Ä–µ–∞–ª–∏–∑—É–π –ª–æ–≥–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ)")
                    else:
                        print("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ md –∏–ª–∏ csv.")
                else:
                    print(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {subcmd}")
            else:
                print(f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{cmd}")
        else:
            trainer.process_text(user_input)

if __name__ == "__main__":
    main()


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\–ø—Ä–æ–µ–∫—Ç.txt =====


## üîß –û–±—â–∞—è —Ü–µ–ª—å
–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—É—á–∞–µ–º–æ–≥–æ –ò–ò, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ:
- —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç,
- –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏ –∑–Ω–∞–Ω–∏—è,
- –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é,
- –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏ (–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å),
- –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π,
- —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –ò–ò.
## üß± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
project_root/
‚îÇ
‚îú‚îÄ‚îÄ run.py                         # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ò–ò (–∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
‚îú‚îÄ‚îÄ config.py                      # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π, —Ä–µ–∑–µ—Ä–≤ –ø–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
‚îÇ
‚îú‚îÄ‚îÄ core/                          # –í—Å—è –ª–æ–≥–∏–∫–∞ –ò–ò
‚îÇ   ‚îú‚îÄ‚îÄ common/                    # –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.py               # –¢–∏–ø—ã (—Ñ—Ä–∞–∑, –∑–Ω–∞–Ω–∏–π, —Ñ–∞–∫—Ç–æ–≤ –∏ —Ç.–ø.)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.py               # –§—É–Ω–∫—Ü–∏–∏: ID, –≤—Ä–µ–º—è, –ø—É—Ç–∏, JSON
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ learner/                   # –ú–æ–¥—É–ª–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º—ã—Å–ª–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ trainer.py             # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rules.py               # –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ curiosity.py           # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ reinforce.py           # –ü–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π (–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ memory/                    # –ü–∞–º—è—Ç—å –ò–ò
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ memory.py              # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ –∑–Ω–∞–Ω–∏—è–º–∏ (JSON)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ processor/                 # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tokenizer.py           # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ classifier.py          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ—Ä–∞–∑—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ parser.py              # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ spellchecker.py        # –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ inputs/                    # –í–≤–æ–¥ –≤–Ω–µ—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚îÇ       ‚îú‚îÄ‚îÄ text_input.py          # –ó–∞–≥–ª—É—à–∫–∞ (–±—É–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
‚îÇ       ‚îî‚îÄ‚îÄ html_scraper.py        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü (BeautifulSoup)
‚îÇ
‚îú‚îÄ‚îÄ tools/                         # –£—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
‚îÇ   ‚îî‚îÄ‚îÄ dev_console_ext.py         # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (/help, /mem –∏ —Ç.–¥.)
‚îÇ
‚îú‚îÄ‚îÄ data/                          # –ü–∞–º—è—Ç—å –∏ –∑–Ω–∞–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ memory.json                # –§–∞–∫—Ç—ã (subject ‚Üí predicate ‚Üí object)
‚îÇ   ‚îî‚îÄ‚îÄ knowledge_base.json        # –ó–Ω–∞–Ω–∏—è (title, content, tags, type)
‚îÇ
‚îú‚îÄ‚îÄ tests/                         # Pytest-—Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
‚îÇ   ‚îú‚îÄ‚îÄ test_tokenizer.py
‚îÇ   ‚îú‚îÄ‚îÄ test_classifier.py
‚îÇ   ‚îú‚îÄ‚îÄ test_memory.py
‚îÇ   ‚îú‚îÄ‚îÄ test_rules.py
‚îÇ   ‚îú‚îÄ‚îÄ test_spellchecker.py
‚îÇ   ‚îú‚îÄ‚îÄ test_utils.py
‚îÇ   ‚îú‚îÄ‚îÄ test_curiosity.py
‚îÇ   ‚îú‚îÄ‚îÄ test_parser.py
‚îÇ   ‚îú‚îÄ‚îÄ test_reinforce.py
‚îÇ   ‚îú‚îÄ‚îÄ test_text_input.py
‚îÇ   ‚îî‚îÄ‚îÄ test_html_scraper.py
‚îÇ
‚îú‚îÄ‚îÄ requirements.txt              # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ (pyspellchecker, pytest –∏ –¥—Ä.)
‚îî‚îÄ‚îÄ README.md                     # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∑–∞–ø—É—Å–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

---
## üìä –ü—Ä–æ–≥—Ä–µ—Å—Å
–§—É–Ω–¥–∞–º–µ–Ω—Ç –æ–±—É—á–∞–µ–º–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —á–∞—Å—Ç–∏—á–Ω–æ.  
–ü—Ä–æ–≥—Ä–µ—Å—Å: **0.00% ‚Äì 8.50%**

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `pytest`
- –ü–æ–∫—Ä—ã—Ç–∏–µ: 93%+
- –¢–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏

## ‚öôÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–∑–±–∏—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º –¥–æ 300 —Å—Ç—Ä–æ–∫
- –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –∏ –º–æ–¥—É–ª—å–Ω–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
- –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏/—á–∞—Ç–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ç–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

## üîÑ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã
- –ê–≤—Ç–æ—Å–±–æ—Ä –∑–Ω–∞–Ω–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
- –ú–µ—Ö–∞–Ω–∏–∑–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤
- –°–∞–º–æ–∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
- Telegram-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ú–µ—Ö–∞–Ω–∏–∑–º —Å–∞–º–æ–æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏

### üß† **–≠—Ç–∞–ø—ã –†–∞–∑–≤–∏—Ç–∏—è –°–∞–º–æ–æ–±—É—á–∞—é—â–µ–≥–æ—Å—è –ò–ò** (–¥–æ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–∏–∏)

| –≠—Ç–∞–ø | –ù–∞–∑–≤–∞–Ω–∏–µ                                                | –°—Ç—Ä–æ–∫ –∫–æ–¥–∞ | –ü—Ä–æ–≥—Ä–µ—Å—Å %      | –†–∞–∑–º–µ—Ä (–ì–ë) | –û–ø–∏—Å–∞–Ω–∏–µ                                                         |
| ---- | ------------------------------------------------------- | ---------- | --------------- | ----------- | ---------------------------------------------------------------- |
| 1Ô∏è‚É£  | **–Ø–¥—Ä–æ –ò–ò** (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø–∞–º—è—Ç—å, –∞–Ω–∞–ª–∏–∑)               | 10,000     | **0.00‚Äì10.0%**  | \~0.05‚Äì0.1  | –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –ë–∞–∑–æ–≤–∞—è –ø–∞–º—è—Ç—å.         |
| 2Ô∏è‚É£  | **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞** (–ª–µ–∫—Å–∏–∫–∞, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ª–æ–≥–∏–∫–∞)          | 15,000     | **10.0‚Äì22.0%**  | \~0.2       | –ú–æ–¥—É–ª—å —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π.     |
| 3Ô∏è‚É£  | **–û–±—É—á–∞–µ–º–æ—Å—Ç—å** (–ø–∞–º—è—Ç—å, –æ–±–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π)  | 25,000     | **22.0‚Äì40.0%**  | \~0.3‚Äì0.5   | –£–º–µ–Ω–∏–µ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã, —Å–≤—è–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –æ–ø—ã—Ç–µ.      |
| 4Ô∏è‚É£  | **–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** (–ø–æ–∏—Å–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å—ã)     | 20,000     | **40.0‚Äì56.0%**  | \~0.4       | –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.       |
| 5Ô∏è‚É£  | **–ê–≤—Ç–æ–Ω–æ–º–∏—è –º—ã—à–ª–µ–Ω–∏—è** (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è)    | 30,000     | **56.0‚Äì76.0%**  | \~0.6       | –¶–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏–µ, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.           |
| 6Ô∏è‚É£  | **–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å–µ–±—è** (–ø–µ—Ä–µ–ø–∏—Å—å –º–æ–¥—É–ª–µ–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è) | 35,000     | **76.0‚Äì90.0%**  | \~0.7‚Äì1.0   | –°–∞–º–æ–∞–Ω–∞–ª–∏–∑, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.   |
| 7Ô∏è‚É£  | **–ú–∏–Ω–∏–º—É–º –≤–Ω–µ—à–Ω–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏**                         | 10,000     | **90.0‚Äì96.0%**  | \~0.2       | –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. |
| 8Ô∏è‚É£  | **–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–∏—è** (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –ò–ò, –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫)    | 10,000     | **96.0‚Äì100.0%** | \~0.2       | –ò–ò –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Å–∞–º –æ–±—É—á–∞–µ—Ç—Å—è –∏ —Ä–∞—Å—Ç—ë—Ç.  |
| –≠—Ç–∞–ø | –ù–∞–∑–≤–∞–Ω–∏–µ           | –°—Ç—Ä–æ–∫ –∫–æ–¥–∞      | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ) | –†–∞–∑–º–µ—Ä –≤ –ì–ë (–∫–æ–¥ + –∑–Ω–∞–Ω–∏—è) |
| ---- | ------------------ | --------------- | ---------------------------------- | -------------------------- |
| 1    | **Bootstrap**      | 5 000 ‚Äì 10 000  | 1‚Äì2 –Ω–µ–¥–µ–ª–∏                         | \~0.05 ‚Äì 0.2 –ì–ë            |
| 2    | **–Ø–¥—Ä–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è** | 10 000 ‚Äì 20 000 | 2‚Äì4 –Ω–µ–¥–µ–ª–∏                         | \~0.2 ‚Äì 0.5 –ì–ë             |
| 3    | **–°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ**   | 20 000 ‚Äì 40 000 | 1‚Äì2 –º–µ—Å—è—Ü–∞                         | \~0.5 ‚Äì 1.5 –ì–ë             |
| 4    | **–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å**   | 30 000 ‚Äì 80 000 | 2‚Äì3 –º–µ—Å—è—Ü–∞                         | \~1.5 ‚Äì 3.5 –ì–ë             |


| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç                                    | –û–ø–∏—Å–∞–Ω–∏–µ                                           | –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ–±—ä—ë–º       |
| -------------------------------------------- | -------------------------------------------------- | --------------------- |
| üîç –ê–Ω–∞–ª–∏–∑ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–¥–∞               | –ß—Ç–µ–Ω–∏–µ AST, –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π | 15 000 ‚Äì 30 000 —Å—Ç—Ä–æ–∫ |
| üß† –õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏               | –ß—Ç–µ–Ω–∏–µ, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä, —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è         | 20 000 ‚Äì 50 000 —Å—Ç—Ä–æ–∫ |
| üõ† –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–¥–∞           | –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ               | 20 000 ‚Äì 60 000 —Å—Ç—Ä–æ–∫ |
| üóÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–Ω–∞–Ω–∏–π                          | –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π, –∫—ç—à, –≤–µ—Ä—Å–∏—è                    | 10 000 ‚Äì 25 000 —Å—Ç—Ä–æ–∫ |
| ü§ñ –ú–µ—Ö–∞–Ω–∏–∑–º "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞" –∏ —Å–∞–º–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è | –ß—Ç–æ —Ö–æ—á–µ—Ç –∏–∑—É—á–∏—Ç—å, –ø–æ—á–µ–º—É, –∫–∞–∫                     | 10 000 ‚Äì 30 000 —Å—Ç—Ä–æ–∫ |
| üß™ –°–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ                          | –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã, —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ä–µ–¥—ã, –æ—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π        | 10 000 ‚Äì 30 000 —Å—Ç—Ä–æ–∫ |
| üßæ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –æ—Ç—á—ë—Ç—ã, –º–µ—Ç–∞-–∂—É—Ä–Ω–∞–ª         | –°–∞–º–æ–æ–ø–∏—Å–∞–Ω–∏–µ, –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π                    | 5 000 ‚Äì 10 000 —Å—Ç—Ä–æ–∫  |

===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\.pytest_cache\README.md =====

# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\common\log.py =====

import logging
import os

LOG_DIR = "data/logs"
os.makedirs(LOG_DIR, exist_ok=True)

logging.basicConfig(
    filename=os.path.join(LOG_DIR, "ai.log"),
    filemode='a',
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.DEBUG
)

def log_info(message: str):
    logging.info(message)

def log_error(message: str):
    logging.error(message)

def log_debug(message: str):
    logging.debug(message)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\common\types.py =====

from dataclasses import dataclass
from enum import Enum
from typing import List, Dict, Any, Optional


class PhraseType(Enum):
    """–¢–∏–ø—ã —Ñ—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ò–ò."""
    STATEMENT = "statement"    # –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    QUESTION = "question"      # –í–æ–ø—Ä–æ—Å
    COMMAND = "command"        # –ö–æ–º–∞–Ω–¥–∞
    UNKNOWN = "unknown"        # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ


class KnowledgeType(Enum):
    """–¢–∏–ø—ã –∑–Ω–∞–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –≤ –ø–∞–º—è—Ç—å."""
    FACT = "fact"
    CONCEPT = "concept"
    DEFINITION = "definition"
    RULE = "rule"
    EVENT = "event"


@dataclass
class Phrase:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã."""
    text: str
    tokens: List[str]
    phrase_type: PhraseType
    intent: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class Fact:
    """–§–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å."""
    id: str
    subject: str
    predicate: str
    obj: str
    source: Optional[str]
    timestamp: str


@dataclass
class KnowledgeEntry:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    id: str
    title: str
    content: str
    type: KnowledgeType
    tags: List[str]
    created: str


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\common\utils.py =====

# core/common/utils.py
import json
import os
import re
import uuid
from typing import List
from datetime import datetime, timezone

def resource_path(relative_path: str) -> str:
    """
    –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ project_root (–∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞).
    –†–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, tools/).
    """
    base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../"))  # –∏–∑ core/common ‚Üí project_root
    return os.path.join(base_path, relative_path)

def clean_text(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:
    - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –≤–∏–¥—ã —Ç–∏—Ä–µ, –¥–µ—Ñ–∏—Å–æ–≤ –∏ —Å–ª—ç—à–µ–π –≤ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª '-'
    - —É–±–∏—Ä–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–∏—Ä–µ
    - —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    - –ø—Ä–∏–≤–æ–¥–∏—Ç –≤—Å—ë –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    """
    # –ó–∞–º–µ–Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏—Ä–µ/—á–µ—Ä—Ç–æ—á–µ–∫/—Å–ª–µ—à–µ–π –Ω–∞ –¥–µ—Ñ–∏—Å
    text = text.replace('‚Äî', '-').replace('‚Äì', '-').replace('‚Äï', '-').replace('/', '-')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Ç–∏—Ä–µ –ø–æ–¥—Ä—è–¥: "--" ‚Üí "-"
    text = re.sub(r'-{2,}', '-', text)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–∞
    text = re.sub(r'[^\w\s-]', '', text)

    # –°–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    return re.sub(r'\s+', ' ', text).strip().lower()

def normalize_whitespace(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∫ –æ–¥–Ω–æ–º—É."""
    return re.sub(r'\s+', ' ', text).strip()

def is_ignorable(text: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π (/help), –ø—É—Å—Ç—ã–º –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–≤–æ–¥–æ–º (> prompt).
    –¢–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏.
    """
    text = text.strip()
    return not text or text.startswith("/") or text.startswith(">")

def generate_id() -> str:
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä."""
    return str(uuid.uuid4())

def timestamp() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ."""
    return datetime.now(timezone.utc).isoformat()

def load_json(filepath: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –≤ —Å–ª–æ–≤–∞—Ä—å."""
    if not os.path.exists(filepath):
        return {}
    with open(filepath, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_json(filepath: str, data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ JSON-—Ñ–∞–π–ª."""
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def pretty_print(obj):
    """–£–¥–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è."""
    print(json.dumps(obj, indent=4, ensure_ascii=False))

def is_valid_statement(tokens: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º.
    –¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ ‚Äî –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∫–∏.
    """
    if len(tokens) < 2:
        return False

    linking_words = {"—ç—Ç–æ", "–µ—Å—Ç—å", "-", "‚Äî", "—è–≤–ª—è–µ—Ç—Å—è", "–±—ã–ª–æ", "–±—É–¥–µ—Ç", "—Å—Ç–∞–ª–∞", "–±—ã–ª–∞"}
    return any(t in linking_words for t in tokens)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\inputs\html_scraper.py =====

import requests
from bs4 import BeautifulSoup

class HtmlScraper:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å HTML-—Å—Ç—Ä–∞–Ω–∏—Ü.
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–≥–∞ <body>.
    """
    def fetch_text(self, url: str) -> str:
        try:
            response = requests.get(url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")
                body = soup.body
                return body.get_text(separator=' ', strip=True) if body else ""
            else:
                print(f"[HtmlScraper] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                return ""
        except Exception as e:
            print(f"[HtmlScraper] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return ""


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\inputs\text_input.py =====

class TextInput:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–≤–æ–¥–∞.
    """
    def get_input(self) -> str:
        return input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò: ")


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\learner\curiosity.py =====

import json
import os

class Curiosity:
    def __init__(self):
        self.unknown_phrases = []

    def add_unknown(self, phrase: str):
        if phrase not in self.unknown_phrases:
            self.unknown_phrases.append(phrase)

    def get_questions(self):
        return [f"–ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '{p}'" for p in self.unknown_phrases]

    def get_all(self) -> list[str]:
        return self.unknown_phrases

    def clear(self):
        self.unknown_phrases.clear()

    def save(self, path: str):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(self.unknown_phrases, f, ensure_ascii=False, indent=2)

    def load(self, path: str):
        if os.path.exists(path):
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read().strip()
                    if content:
                        self.unknown_phrases = json.loads(content)
                    else:
                        self.unknown_phrases = []
            except (json.JSONDecodeError, IOError) as e:
                print(f"[Curiosity] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                self.unknown_phrases = []


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\learner\generator.py =====

#core/learner/generator.py
from core.processor.classifier import PhraseType
from core.memory.memory import Memory
from core.common.utils import timestamp


class Generator:
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –ò–ò –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Ñ—Ä–∞–∑—ã.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø —Ñ—Ä–∞–∑—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏.
    """

    def __init__(self, memory: Memory = None):
        self.memory = memory

    def generate_response(self, phrase_type: PhraseType, tokens: list[str], context: dict = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ñ—Ä–∞–∑—ã –∏ —Ç–æ–∫–µ–Ω–æ–≤
        :param phrase_type: —Ç–∏–ø —Ñ—Ä–∞–∑—ã (–≤–æ–ø—Ä–æ—Å, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–∞ –∏ —Ç.–¥.)
        :param tokens: —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Ñ—Ä–∞–∑—ã
        :param context: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        :return: —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
        """
        if phrase_type.name == "QUESTION":
            return self._respond_to_question(tokens)

        if phrase_type.name == "STATEMENT":
            return self._respond_to_statement(tokens)

        if phrase_type.name == "COMMAND":
            return "–ü–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É, –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ—ë –≤—ã–ø–æ–ª–Ω—è—Ç—å."

        return "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."

    def _respond_to_question(self, tokens: list[str]) -> str:
        if self.memory and tokens:
            keyword = tokens[-1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "—ç–Ω–µ—Ä–≥–∏—è" –∏–ª–∏ "–∫–æ—Ç"
            found = self.memory.search_fact_by_token(keyword)
            if found:
                return f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: {found[0]}"
        return "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

    def _respond_to_statement(self, tokens: list[str]) -> str:
        if self.memory and tokens:
            self.memory.add_fact(tokens[0], "is", " ".join(tokens[1:]))
        return "–•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."

    def ask_clarification(self, phrase: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Ñ—Ä–∞–∑–µ"""
        return f"–¢—ã –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç: '{phrase}'?"

    def generate_acknowledgement(self) -> str:
        """–ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        return "–ü—Ä–∏–Ω—è—Ç–æ. –ó–∞–ø–∏—Å–∞–ª."

    def generate_error(self, info: str = "") -> str:
        return f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. {info}"

    def describe(self) -> str:
        return "–Ø ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤. –Ø —Ñ–æ—Ä–º–∏—Ä—É—é –±–∞–∑–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã."

    def debug_info(self) -> str:
        return f"[Generator@{timestamp()}] memory: {'on' if self.memory else 'off'}"


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\learner\reinforce.py =====

class Reinforce:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ò–ò.
    –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É—Å–∏–ª–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π,
    –Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å–∏–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –ø—Ä–∞–≤–∏–ª –∏–ª–∏ —Ñ–∞–∫—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """
    def __init__(self):
        self.rewards = {}

    def reinforce_fact(self, fact_id: str):
        self.rewards[fact_id] = self.rewards.get(fact_id, 0) + 1
        print(f"[Reinforce] –£—Å–∏–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ {fact_id}: {self.rewards[fact_id]}")

    def get_reward(self, fact_id: str) -> int:
        return self.rewards.get(fact_id, 0)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\learner\rules.py =====

from typing import List, Optional, Dict, Any
from core.common.types import PhraseType

class Rule:
    """
    –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ñ—Ä–∞–∑—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∑–Ω–∞–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.
    """
    def __init__(self, name: str, condition: callable, action: callable):
        self.name = name
        self.condition = condition  # –§—É–Ω–∫—Ü–∏—è: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (phrase_type, tokens, raw_text), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool
        self.action = action        # –§—É–Ω–∫—Ü–∏—è: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (phrase_type, tokens, raw_text), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç


class RulesEngine:
    def __init__(self):
        self.rules: List[Rule] = []

    def add_rule(self, rule: Rule):
        self.rules.append(rule)

    def apply_rules(self, phrase_type: PhraseType, tokens: List[str], raw_text: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∫ —Ñ—Ä–∞–∑–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞.
        """
        for rule in self.rules:
            if rule.condition(phrase_type, tokens, raw_text):
                return rule.action(phrase_type, tokens, raw_text)
        return None


# –£—Å–ª–æ–≤–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ–∞–∫—Ç–∞ —Å 3 –∏ –±–æ–ª–µ–µ —Ç–æ–∫–µ–Ω–∞–º–∏
def condition_fact_long(phrase_type: PhraseType, tokens: List[str], raw_text: str) -> bool:
    return phrase_type == PhraseType.STATEMENT and len(tokens) >= 3

def action_fact_long(phrase_type: PhraseType, tokens: List[str], raw_text: str) -> Dict[str, Any]:
    subject = tokens[0]
    predicate = tokens[1]
    obj = " ".join(tokens[2:])
    return {"type": "fact", "subject": subject, "predicate": predicate, "object": obj, "source": raw_text}

# –£—Å–ª–æ–≤–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ–∞–∫—Ç–∞ —Å —Ä–æ–≤–Ω–æ 2 —Ç–æ–∫–µ–Ω–∞–º–∏
def condition_fact_short(phrase_type: PhraseType, tokens: List[str], raw_text: str) -> bool:
    return phrase_type == PhraseType.STATEMENT and len(tokens) == 2

def action_fact_short(phrase_type: PhraseType, tokens: List[str], raw_text: str) -> Dict[str, Any]:
    subject = tokens[0]
    predicate = tokens[1]
    obj = ""  # –û–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç
    return {"type": "fact", "subject": subject, "predicate": predicate, "object": obj, "source": raw_text}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
rules_engine = RulesEngine()
rules_engine.add_rule(Rule("fact_rule_long", condition_fact_long, action_fact_long))
rules_engine.add_rule(Rule("fact_rule_short", condition_fact_short, action_fact_short))
# ...–≤–Ω–∏–∑—É rules.py

def condition_question(phrase_type, tokens, raw_text):
    return phrase_type == PhraseType.QUESTION

def action_question(phrase_type, tokens, raw_text):
    return {
        "type": "question",
        "text": raw_text,
        "tokens": tokens
    }

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ (–ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–æ–≤)
rules_engine.add_rule(Rule("question_rule", condition_question, action_question))


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\learner\trainer.py =====

#core\learner\trainer.py
from core.processor.tokenizer import Tokenizer
from core.processor.classifier import Classifier
from core.memory.memory import Memory
from core.common.types import PhraseType
from core.learner.rules import rules_engine
from core.learner.curiosity import Curiosity
from core.learner.generator import Generator
from core.thinker.planner import Planner
from core.thinker.self_report import SelfReporter
from core.processor.spellchecker import SpellCorrector
from core.common.log import log_info, log_error
from core.common.utils import resource_path
from core.thinker.meta_journal import MetaJournal
from core.common.utils import clean_text, is_ignorable 
from core.common.utils import is_valid_statement 
from core.common.utils import resource_path

class Trainer:
    def __init__(self):
        self.tokenizer = Tokenizer()
        self.classifier = Classifier()
        self.memory = Memory(
            memory_path=resource_path("data/memory.json"),
            knowledge_path=resource_path("data/knowledge_base.json")
        )
        self.curiosity = Curiosity()
        self.curiosity_path = resource_path("data/curiosity.json")
        self.curiosity.load(self.curiosity_path)
        self.curiosity.save(self.curiosity_path)
        self.generator = Generator(memory=self.memory)
        self.planner = Planner(curiosity=self.curiosity)
        self.spellchecker = SpellCorrector()
        self.reporter = SelfReporter()
        self.journal = MetaJournal()

    def process_text(self, text: str):
        """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –æ–±—É—á–µ–Ω–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""

        if is_ignorable(text):
            print("[Trainer] –ò–≥–Ω–æ—Ä: —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.")
            return

        text = clean_text(text)  # –æ—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

        phrase_type = self.classifier.classify(text)
        tokens = self.tokenizer.tokenize(text)

        if phrase_type.name == "STATEMENT" and not is_valid_statement(tokens):
            print("[Trainer] –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–æ –∫–∞–∫ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ.")
            self.reporter.log_action("–§—Ä–∞–∑–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.")
            return

        print(f"[Trainer] –¢–∏–ø —Ñ—Ä–∞–∑—ã: {phrase_type.name}")
        print(f"[Trainer] –¢–æ–∫–µ–Ω—ã: {tokens}")

        corrected = self.spellchecker.correct_tokens(tokens)
        if corrected != tokens:
            print(f"[Spell] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {tokens} ‚Üí {corrected}")
            tokens = corrected

        result = rules_engine.apply_rules(phrase_type, tokens, text)
        if result:
            if result.get("type") == "fact":
                added = self.memory.add_fact(
                    result["subject"],
                    result["predicate"],
                    result["object"],
                    source=result.get("source")
                )
                if added:
                    msg = f"–§–∞–∫—Ç: {result['subject']} ‚Äî {result['predicate']} ‚Äî {result['object']}"
                    print(f"[Trainer] –ó–∞–ø–æ–º–Ω–µ–Ω–æ: {msg}")
                    log_info(f"–§–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {msg}")
                    self.reporter.log_action(f"–ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: {msg}")
                    self.journal.record_fact_added(result['subject'], result['predicate'], result['object'])

            elif result.get("type") == "question":
                self.reporter.log_action(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: {result['text']}")
                self.journal.record_entry(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: {result['text']}", tag="question")
                self.curiosity.add_unknown(result["text"])
                self.journal.record_goal(f"–ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '{result['text']}'")  # ‚¨Ö —ç—Ç–æ –∏ –±—É–¥–µ—Ç —Ü–µ–ª—å—é
                print(f"[Trainer] –í–æ–ø—Ä–æ—Å: {result['text']}")
                log_info(f"–í–æ–ø—Ä–æ—Å: {result['text']}")

            elif result.get("type") == "concept":
                self.memory.add_knowledge(
                    title=result["title"],
                    content=result["content"],
                    k_type=result["k_type"],
                    tags=result.get("tags", [])
                )
                self.reporter.log_action(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞–Ω–∏–µ: {result['title']}")
                self.journal.record_entry(f"–ù–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ: {result['title']}", tag="knowledge")
                print(f"[Trainer] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –∑–Ω–∞–Ω–∏–µ: {result['title']}")
    
        else:
            self.curiosity.add_unknown(text)
            print("[Trainer] –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.")
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {text}")
            self.reporter.log_action("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            self.journal.record_unknown_phrase(text)

            # –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            question = self.generator.ask_clarification(text)
            print(f"[Generator] –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}")
            self.journal.record_entry(question, tag="clarification")
            self.journal.record_goal(question)  # ‚¨Ö –¥–æ–±–∞–≤—å —ç—Ç–æ

        response = self.generator.generate_response(phrase_type, tokens)
        print(f"[Generator] –û—Ç–≤–µ—Ç: {response}")
        self.reporter.log_action(f"–û—Ç–≤–µ—Ç: {response}", source="Generator")
        self.journal.record_response(response)
        self.curiosity.save(self.curiosity_path)

    def plan_learning(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
        plans = self.planner.plan()
        for task in plans:
            self.journal.record_goal(task)
        return plans


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\memory\memory.py =====

import os
from typing import List, Optional
from core.common.utils import load_json, save_json, generate_id, timestamp
from core.common.types import Fact, KnowledgeEntry, KnowledgeType
from core.common.utils import resource_path

MEMORY_FILE = resource_path("data/memory.json")
KNOWLEDGE_FILE = resource_path("data/knowledge_base.json")


class Memory:
    def __init__(self, memory_path: Optional[str] = None, knowledge_path: Optional[str] = None):
        self.memory_path = memory_path or MEMORY_FILE
        self.knowledge_path = knowledge_path or KNOWLEDGE_FILE

        self.facts = self._load_facts()
        self.knowledge = self._load_knowledge()

    def _load_facts(self) -> List[Fact]:
        if not os.path.exists(self.memory_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []
        
        data = load_json(self.memory_path)
        return [Fact(**f) for f in data.get("facts", [])]

    def _load_knowledge(self) -> List[KnowledgeEntry]:
        if not os.path.exists(self.knowledge_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []
        
        data = load_json(self.knowledge_path)
        return [KnowledgeEntry(**k) for k in data.get("entries", [])]

    def _save_facts(self):
        data = {"facts": [f.__dict__ for f in self.facts]}
        save_json(self.memory_path, data)

    def _save_knowledge(self):
        data = {
            "entries": [
                {
                    **k.__dict__,
                    "type": k.type.value if hasattr(k.type, "value") else k.type
                }
                for k in self.knowledge
            ]
        }
        save_json(self.knowledge_path, data)

    def add_fact(self, subject: str, predicate: str, obj: str, source: Optional[str] = None) -> bool:
        for f in self.facts:
            if f.subject == subject and f.predicate == predicate and f.obj == obj:
                print(f"[Memory] –§–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {subject} ‚Äî {predicate} ‚Äî {obj}")
                return False

        fact = Fact(
            id=generate_id(),
            subject=subject,
            predicate=predicate,
            obj=obj,
            source=source,
            timestamp=timestamp()
        )
        self.facts.append(fact)
        self._save_facts()
        print(f"[Memory] –ù–æ–≤—ã–π —Ñ–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {subject} ‚Äî {predicate} ‚Äî {obj}")
        return True

    def add_knowledge(self, title: str, content: str, k_type: KnowledgeType, tags: List[str]):
        entry = KnowledgeEntry(
            id=generate_id(),
            title=title,
            content=content,
            type=k_type,
            tags=tags,
            created=timestamp()
        )
        self.knowledge.append(entry)
        self._save_knowledge()

    def search_fact_by_token(self, token: str) -> List[str]:
        token = token.lower().strip()
        return [
            f"{f.subject} ‚Äî {f.predicate} ‚Äî {f.obj}"
            for f in self.facts
            if token == f.subject.lower() or token == f.obj.lower()
        ]



    def find_facts_by_subject(self, subject: str) -> List[Fact]:
        return [f for f in self.facts if f.subject == subject]

    def find_knowledge_by_tag(self, tag: str) -> List[KnowledgeEntry]:
        return [k for k in self.knowledge if tag in k.tags]


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\memory\recall.py =====

from core.memory.memory import Memory

class Recall:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø–∞–º—è—Ç–∏.
    –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç—É Memory.
    """
    def __init__(self):
        self.memory = Memory()

    def recall_facts(self, subject: str):
        return self.memory.find_facts_by_subject(subject)

    def recall_knowledge(self, tag: str):
        return self.memory.find_knowledge_by_tag(tag)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\memory\update.py =====

from core.memory.memory import Memory
from core.common.types import Fact

class UpdateMemory:
    """
    –ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏.
    –ü–æ–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–∫—Ç–∞ –ø–æ ID.
    """
    def __init__(self):
        self.memory = Memory()

    def update_fact(self, fact_id: str, new_subject: str, new_predicate: str, new_obj: str):
        updated = False
        for i, fact in enumerate(self.memory.facts):
            if fact.id == fact_id:
                self.memory.facts[i] = Fact(fact_id, new_subject, new_predicate, new_obj, fact.source, fact.timestamp)
                updated = True
                break
        if updated:
            self.memory._save_facts()
            print(f"[UpdateMemory] –§–∞–∫—Ç {fact_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            print(f"[UpdateMemory] –§–∞–∫—Ç {fact_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\processor\classifier.py =====

# core/processor/classifier.py

from core.common.types import PhraseType


class Classifier:
    def __init__(self):
        self.question_starters = {"—á—Ç–æ", "–∫—Ç–æ", "–≥–¥–µ", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–∞–∫", "–∫–æ–≥–¥–∞", "—Å–∫–æ–ª—å–∫–æ", "–º–æ–∂–Ω–æ", "–ª–∏"}
        self.command_verbs = {"—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏", "—Å–∫–∞–∂–∏", "–æ–±—ä—è—Å–Ω–∏", "–∑–∞–ø–æ–º–Ω–∏", "–æ—Ç–≤–µ—Ç—å", "–Ω–∞–π–¥–∏"}

    def classify(self, text: str) -> PhraseType:
        lowered = text.strip().lower()
        if not text:
            return PhraseType.UNKNOWN
        if text.startswith("/"):
            return PhraseType.COMMAND
        if all(c == '?' for c in lowered):
            return PhraseType.UNKNOWN

        if lowered.endswith("?"):
            return PhraseType.QUESTION

        if any(lowered.startswith(q) for q in self.question_starters):
            return PhraseType.QUESTION

        if any(lowered.startswith(cmd) for cmd in self.command_verbs):
            return PhraseType.COMMAND

        if lowered.endswith(".") or " " in lowered:
            return PhraseType.STATEMENT

        return PhraseType.UNKNOWN


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\processor\extractor.py =====

from typing import Dict, Any, Optional

class Extractor:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞.
    –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    """
    def extract_fact(self, tokens: list, raw_text: str) -> Optional[Dict[str, Any]]:
        if len(tokens) < 3:
            return None
        return {
            "subject": tokens[0],
            "predicate": tokens[1],
            "object": " ".join(tokens[2:]),
            "source": raw_text
        }


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\processor\parser.py =====

# core/processor/parser.py

from core.common.types import Phrase, PhraseType
from core.processor.tokenizer import Tokenizer

class Parser:
    def __init__(self):
        self.tokenizer = Tokenizer()

    def parse(self, text: str) -> Phrase:
        tokens = self.tokenizer.tokenize(text)
        phrase_type = PhraseType.STATEMENT  # –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return Phrase(text=text, tokens=tokens, phrase_type=phrase_type)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\processor\spellchecker.py =====

from spellchecker import SpellChecker

class SpellCorrector:
    def __init__(self, language="ru"):
        self.spell = SpellChecker(language=language)

    def correct_tokens(self, tokens: list) -> list:
        corrected = []
        for word in tokens:
            correction = self.spell.correction(word)
            corrected.append(correction if correction else word)
        return corrected


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\processor\tokenizer.py =====

import re
from typing import List
from core.common.utils import clean_text


class Tokenizer:
    def __init__(self):
        # –ú–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤
        self.delimiters = r"[ \t\n\r\f\v.,!?;:\"()\-‚Äî]+"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å–ª–æ–≤

    def tokenize(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω—ã."""
        cleaned = clean_text(text)
        tokens = re.split(self.delimiters, cleaned)
        return [t for t in tokens if t]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    def count_tokens(self, text: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤."""
        return len(self.tokenize(text))

    def preview_tokens(self, text: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        tokens = self.tokenize(text)
        print(f"[Tokenizer] ‚Üí {tokens}")


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\thinker\meta_journal.py =====

import os
import ast
from core.common.utils import timestamp, resource_path

class MetaJournal:
    """
    –•—Ä–∞–Ω–∏—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ò–ò –æ —Å–µ–±–µ, —Ü–µ–ª—è—Ö, –æ—â—É—â–µ–Ω–∏—è—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.
    """

    def __init__(self, path: str = None):
        self.path = path or resource_path("data/meta_journal.json")
        os.makedirs(os.path.dirname(self.path), exist_ok=True)

    def record_entry(self, thought: str, tag: str = "general"):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
        :param thought: —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—â—É—â–µ–Ω–∏–µ
        :param tag: –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: goal, error, reflection)
        """
        entry = {
            "time": timestamp(),
            "tag": tag,
            "thought": thought
        }
        with open(self.path, "a", encoding="utf-8") as f:
            f.write(str(entry) + "\n")

    def record_fact_added(self, subject: str, predicate: str, obj: str):
        self.record_entry(
            f"–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: {subject} ‚Äî {predicate} ‚Äî {obj}.",
            tag="fact"
        )

    def record_unknown_phrase(self, phrase: str):
        self.record_entry(
            f"–Ø –Ω–µ –ø–æ–Ω—è–ª —Ñ—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ—ë –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: '{phrase}'",
            tag="curiosity"
        )

    def record_response(self, response: str):
        self.record_entry(
            f"–Ø –æ—Ç–≤–µ—Ç–∏–ª: {response}",
            tag="response"
        )

    def record_goal(self, description: str):
        self.record_entry(
            f"–¶–µ–ª—å: {description}",
            tag="goal"
        )

    def record_reflection(self, insight: str):
        self.record_entry(
            f"–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ: {insight}",
            tag="reflection"
        )

    def get_recent_entries(self, limit: int = 5) -> list[str]:
        if not os.path.exists(self.path):
            return []
        with open(self.path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        return lines[-limit:]

    def get_logged_goals(self) -> list[str]:
        """–í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–µ–π –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å —Ç–µ–≥–æ–º 'goal'"""
        if not os.path.exists(self.path):
            return []
    
        goals = []
        with open(self.path, "r", encoding="utf-8") as f:
            for line in f:
                try:
                    entry = ast.literal_eval(line.strip())
                    if isinstance(entry, dict) and entry.get("tag") == "goal":
                        goals.append(entry["thought"])
                except Exception as e:
                    print(f"[MetaJournal] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
                    continue
        return goals

    def describe(self) -> str:
        return "–Ø –≤–µ–¥—É –º–µ—Ç–∞-–∂—É—Ä–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º."

    def debug_info(self) -> str:
        return f"[MetaJournal@{timestamp()}] –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if os.path.exists(self.path) else '–ù–µ—Ç'}"


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\thinker\planner.py =====

from core.learner.curiosity import Curiosity
from core.common.utils import timestamp


class Planner:
    def __init__(self, curiosity):
        self.curiosity = curiosity
        from core.thinker.meta_journal import MetaJournal
        self.journal = MetaJournal()

    def plan(self) -> list[str]:
        questions = self.curiosity.get_questions()
        if not questions:
            return ["–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."]

        existing_goals = self.journal.get_logged_goals()
        new_goals = [q for q in questions if q not in existing_goals]

        return new_goals or ["–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."]

    def describe(self) -> str:
        return "–Ø –ø–ª–∞–Ω–∏—Ä—É—é, —á—Ç–æ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –¥–∞–ª—å—à–µ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–Ω—è—Ç—ã—Ö —Ñ—Ä–∞–∑."

    def debug_info(self) -> str:
        return f"[Planner@{timestamp()}] –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.curiosity.get_all())}"


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\core\thinker\self_report.py =====

import os
from core.common.utils import timestamp, resource_path


class SelfReporter:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ò–ò –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞.
    """

    def __init__(self, log_path: str = None):
        self.log_path = log_path or resource_path("data/self_log.txt")
        os.makedirs(os.path.dirname(self.log_path), exist_ok=True)

    def log_action(self, action: str, source: str = "Trainer"):
        """
        –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –≤ –∂—É—Ä–Ω–∞–ª
        :param action: –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :param source: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä (–º–æ–¥—É–ª—å, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ —Ç.–ø.)
        """
        entry = f"[{timestamp()}] [{source}] {action}\n"
        with open(self.log_path, "a", encoding="utf-8") as f:
            f.write(entry)

    def get_recent_logs(self, limit: int = 10) -> list[str]:
        if not os.path.exists(self.log_path):
            return []
        with open(self.log_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        return lines[-limit:]

    def describe(self) -> str:
        return "–Ø —Ñ–∏–∫—Å–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ò–ò –¥–ª—è —Ü–µ–ª–µ–π —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞."


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\data\curiosity.json =====

[
  "–∫—Ç–æ —Ç–∞–∫–æ–π —è"
]

===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\data\knowledge_base.json =====

{
    "entries": [
        {
            "id": "6a2b92d5-003d-4677-9ac8-6dcfa911ca99",
            "title": "–¢–µ—Å—Ç",
            "content": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "type": "fact",
            "tags": [
                "—Ç–µ—Å—Ç"
            ],
            "created": "2025-06-25T19:47:05.917364"
        },
        {
            "id": "e41b0ce8-843b-4715-a75e-1fde8280b642",
            "title": "–¢–µ—Å—Ç",
            "content": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "type": "fact",
            "tags": [
                "—Ç–µ—Å—Ç"
            ],
            "created": "2025-06-25T19:50:27.315605+00:00"
        },
        {
            "id": "7d57d090-0c66-4c30-8e6a-c9d19044255a",
            "title": "–¢–µ—Å—Ç",
            "content": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "type": "fact",
            "tags": [
                "—Ç–µ—Å—Ç"
            ],
            "created": "2025-06-25T19:53:26.690630+00:00"
        }
    ]
}

===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\data\memory.json =====

{
    "facts": [
        {
            "id": "22222222-2222-2222-2222-222222222222",
            "subject": "–≤–æ–¥–∞",
            "predicate": "—Å–æ—Å—Ç–æ–∏—Ç –∏–∑",
            "obj": "–≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥–∞",
            "source": "–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è",
            "timestamp": "2025-06-25T12:00:00"
        },
        {
            "id": "5d113417-ab1b-42d5-93a5-c1e703651742",
            "subject": "–¥–µ—Ä–µ–≤—å—è",
            "predicate": "–º–æ–≥—É—Ç",
            "obj": "–≥–æ—Ä–µ—Ç—å",
            "source": "–î–µ—Ä–µ–≤—å—è –º–æ–≥—É—Ç –≥–æ—Ä–µ—Ç—å",
            "timestamp": "2025-06-25T18:18:49.854477"
        },
        {
            "id": "4e447987-563c-4607-99b2-0db4dec3e842",
            "subject": "–¢–µ—Å—Ç",
            "predicate": "–µ—Å—Ç—å",
            "obj": "–¥–∞–Ω–Ω—ã–µ",
            "source": "—Ç–µ—Å—Ç",
            "timestamp": "2025-06-25T19:26:35.762239"
        },
        {
            "id": "a8c0063d-1108-4741-af2a-000df871027f",
            "subject": "—Å–æ–ª–Ω—Ü–µ",
            "predicate": "—ç—Ç–æ",
            "obj": "–∑–≤–µ–∑–¥–∞",
            "source": "–°–æ–ª–Ω—Ü–µ —ç—Ç–æ –∑–≤–µ–∑–¥–∞",
            "timestamp": "2025-06-25T19:58:12.328126+00:00"
        },
        {
            "id": "d13045a9-9903-4c03-aa28-4cbc3f78a3aa",
            "subject": "—Ç–µ—Å—Ç",
            "predicate": "–µ—Å—Ç—å",
            "obj": "–ø—Ä–∏–º–µ—Ä",
            "source": null,
            "timestamp": "2025-06-28T14:28:37.026743+00:00"
        },
        {
            "id": "9ec2630a-eb21-45bb-8ece-afa56eef8c41",
            "subject": "—Å–æ–ª–Ω—Ü–µ",
            "predicate": "is",
            "obj": "—ç—Ç–æ –∑–≤–µ–∑–¥–∞",
            "source": null,
            "timestamp": "2025-06-30T19:30:09.964193+00:00"
        },
        {
            "id": "caf385c8-ac46-4f2a-aa2b-e76b3c8dd833",
            "subject": "–±–ª–∏–º–±–∞–∑–æ–∏–¥",
            "predicate": "–∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª",
            "obj": "–º–µ—Ç–∞—Å—Ñ–µ—Ä—É",
            "source": "–±–ª–∏–º–±–∞–∑–æ–∏–¥ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª –º–µ—Ç–∞—Å—Ñ–µ—Ä—É",
            "timestamp": "2025-06-30T20:07:54.574359+00:00"
        },
        {
            "id": "89fcf6dc-1c60-47f2-8834-d6467ea71a7c",
            "subject": "–±–ª–∏–º–±–∞–∑–æ–∏–¥",
            "predicate": "is",
            "obj": "–∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª –º–µ—Ç–∞—Å—Ñ–µ—Ä—É",
            "source": null,
            "timestamp": "2025-06-30T20:07:54.578938+00:00"
        },
        {
            "id": "c3607bd0-790a-4119-8fda-a36d7489cdbd",
            "subject": "plan",
            "predicate": "is",
            "obj": "",
            "source": null,
            "timestamp": "2025-06-30T20:08:07.085070+00:00"
        },
        {
            "id": "90030dac-10a2-4027-8da9-d0c95baead66",
            "subject": "–∫–æ—Ç",
            "predicate": "—ç—Ç–æ",
            "obj": "–∂–∏–≤–æ—Ç–Ω–æ–µ",
            "source": "–∫–æ—Ç —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ",
            "timestamp": "2025-07-03T12:32:31.778092+00:00"
        },
        {
            "id": "e972dc96-8673-4cc9-a72a-6ceaa78db892",
            "subject": "–∫–æ—Ç",
            "predicate": "is",
            "obj": "—ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ",
            "source": null,
            "timestamp": "2025-07-03T12:32:31.856519+00:00"
        },
        {
            "id": "2b60b4cd-0881-46e6-b511-e6fc1576ea47",
            "subject": "—Å–ª–æ–Ω",
            "predicate": "—ç—Ç–æ",
            "obj": "–∂–∏–≤–æ—Ç–Ω–æ–µ",
            "source": "—Å–ª–æ–Ω —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ",
            "timestamp": "2025-07-03T12:35:34.397028+00:00"
        },
        {
            "id": "134e80ee-0f18-4206-bdb2-509e57388f7c",
            "subject": "—Å–ª–æ–Ω",
            "predicate": "is",
            "obj": "—ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ",
            "source": null,
            "timestamp": "2025-07-03T12:35:34.425334+00:00"
        },
        {
            "id": "e27fe439-25c7-45a4-aeb1-6d880796c70c",
            "subject": "–≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π",
            "predicate": "–∫–æ–ª–ª–∞–ø—Å",
            "obj": "",
            "source": "–≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π –∫–æ–ª–ª–∞–ø—Å–æ–Ω",
            "timestamp": "2025-07-03T12:36:20.909891+00:00"
        },
        {
            "id": "f0f677f2-2c41-41be-aeb3-c67bf347f20c",
            "subject": "–≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π",
            "predicate": "is",
            "obj": "–∫–æ–ª–ª–∞–ø—Å",
            "source": null,
            "timestamp": "2025-07-03T12:36:21.217084+00:00"
        },
        {
            "id": "78b7a285-5c26-453b-8566-24d1a411e6c5",
            "subject": "–∫–æ—Ç",
            "predicate": "–∂–∏–≤–æ—Ç–Ω–æ–µ",
            "obj": "",
            "source": "–∫–æ—Ç –∂–≤0—Ç–Ω–æ–µ",
            "timestamp": "2025-07-03T12:38:15.034313+00:00"
        },
        {
            "id": "a52c7e40-7d14-4b51-a83b-657064b764b2",
            "subject": "–∫–æ—Ç",
            "predicate": "is",
            "obj": "–∂–∏–≤–æ—Ç–Ω–æ–µ",
            "source": null,
            "timestamp": "2025-07-03T12:38:15.049804+00:00"
        },
        {
            "id": "661db9d7-dc80-4b36-a033-0f68e5c91ef9",
            "subject": "—ç–Ω–µ—Ä–≥–∏—è",
            "predicate": "—ç—Ç–æ",
            "obj": "—Å–∏–ª–∞",
            "source": "—ç–Ω–µ—Ä–≥–∏—è —ç—Ç–æ —Å–∏–ª–∞",
            "timestamp": "2025-07-03T12:56:25.363747+00:00"
        },
        {
            "id": "33d52cbc-3b97-4780-9db9-3f56445013a3",
            "subject": "—ç–Ω–µ—Ä–≥–∏—è",
            "predicate": "is",
            "obj": "—ç—Ç–æ —Å–∏–ª–∞",
            "source": null,
            "timestamp": "2025-07-03T12:56:25.372105+00:00"
        },
        {
            "id": "4c2f976e-cea6-4d45-83cd-e4a3b3080199",
            "subject": "—è",
            "predicate": "—ç—Ç–æ",
            "obj": "—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
            "source": "—è - —ç—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
            "timestamp": "2025-07-03T15:10:47.304947+00:00"
        },
        {
            "id": "746faefd-1340-415d-80da-cef71a13b32b",
            "subject": "—è",
            "predicate": "is",
            "obj": "—ç—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
            "source": null,
            "timestamp": "2025-07-03T15:10:47.308786+00:00"
        }
    ]
}

===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\data\meta_journal.json =====

{'time': '2025-06-30T19:30:09.967359+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-06-30T19:36:55.871550+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-06-30T19:39:11.424483+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-06-30T19:52:11.934933+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-06-30T20:07:17.154763+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-06-30T20:07:54.578044+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –±–ª–∏–º–±–∞–∑–æ–∏–¥ ‚Äî –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª ‚Äî –º–µ—Ç–∞—Å—Ñ–µ—Ä—É.'}
{'time': '2025-06-30T20:07:54.581740+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-06-30T20:08:07.084553+00:00', 'tag': 'curiosity', 'thought': "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ñ—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ—ë –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: '> /plan'"}
{'time': '2025-06-30T20:08:07.087261+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-06-30T20:08:18.333503+00:00', 'tag': 'goal', 'thought': "–¶–µ–ª—å: –ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '> /plan'"}
{'time': '2025-06-30T20:10:58.225865+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-06-30T20:18:38.262374+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:32:31.823145+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ.'}
{'time': '2025-07-03T12:32:31.864732+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:33:03.987894+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è'}
{'time': '2025-07-03T12:33:36.718609+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T12:34:12.386098+00:00', 'tag': 'curiosity', 'thought': "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ñ—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ—ë –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: 'debug'"}
{'time': '2025-07-03T12:34:12.387444+00:00', 'tag': 'clarification', 'thought': "–¢—ã –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç: 'debug'?"}
{'time': '2025-07-03T12:34:12.397430+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.'}
{'time': '2025-07-03T12:35:34.405296+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: —Å–ª–æ–Ω ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ.'}
{'time': '2025-07-03T12:35:34.440985+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:36:21.176671+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π ‚Äî –∫–æ–ª–ª–∞–ø—Å ‚Äî .'}
{'time': '2025-07-03T12:36:21.327902+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:38:15.048976+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –∫–æ—Ç ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî .'}
{'time': '2025-07-03T12:38:15.056722+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:48:11.095684+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è'}
{'time': '2025-07-03T12:48:11.128680+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T12:48:21.076709+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T12:49:55.933431+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T12:49:55.949836+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T12:50:07.889256+00:00', 'tag': 'curiosity', 'thought': "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ñ—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ—ë –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: '–∫–æ—Ç'"}
{'time': '2025-07-03T12:50:07.896893+00:00', 'tag': 'clarification', 'thought': "–¢—ã –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∫–æ—Ç'?"}
{'time': '2025-07-03T12:50:07.899743+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.'}
{'time': '2025-07-03T12:50:20.500130+00:00', 'tag': 'curiosity', 'thought': "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ñ—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ—ë –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: '–∂–∏–≤–æ—Ç–Ω–æ–µ'"}
{'time': '2025-07-03T12:50:20.500978+00:00', 'tag': 'clarification', 'thought': "–¢—ã –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∂–∏–≤–æ—Ç–Ω–æ–µ'?"}
{'time': '2025-07-03T12:50:20.514816+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.'}
{'time': '2025-07-03T12:50:33.333717+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:52:20.499174+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T12:56:25.371657+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: —ç–Ω–µ—Ä–≥–∏—è ‚Äî —ç—Ç–æ ‚Äî —Å–∏–ª–∞.'}
{'time': '2025-07-03T12:56:25.385038+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T12:56:50.502603+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è'}
{'time': '2025-07-03T12:56:50.512660+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T13:34:00.650146+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:36:47.381579+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:37:00.140435+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:39:03.486955+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:47:26.712540+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:47:54.594476+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T13:47:54.696298+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T13:48:03.496564+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ –∫–æ—Ç'}
{'time': '2025-07-03T13:48:03.533612+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T13:48:14.677907+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–µ—Å—Ç'}
{'time': '2025-07-03T13:48:14.726717+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T13:48:50.781737+00:00', 'tag': 'curiosity', 'thought': "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ñ—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ—ë –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: '–∫–æ—Ç'"}
{'time': '2025-07-03T13:48:50.805797+00:00', 'tag': 'clarification', 'thought': "–¢—ã –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∫–æ—Ç'?"}
{'time': '2025-07-03T13:48:50.861943+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.'}
{'time': '2025-07-03T13:48:58.351973+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:50:51.625745+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T13:51:01.361811+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è'}
{'time': '2025-07-03T13:51:01.474422+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T13:55:22.030707+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T13:55:22.049338+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: "–°–æ–ª–Ω—Ü–µ" ‚Äî "–°–æ–ª–Ω—Ü–µ ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",'}
{'time': '2025-07-03T13:55:44.832217+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è'}
{'time': '2025-07-03T13:55:44.884661+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —ç–Ω–µ—Ä–≥–∏—è ‚Äî —ç—Ç–æ ‚Äî —Å–∏–ª–∞'}
{'time': '2025-07-03T14:00:21.188248+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T14:00:21.304236+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: "–°–æ–ª–Ω—Ü–µ" ‚Äî "–°–æ–ª–Ω—Ü–µ ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",'}
{'time': '2025-07-03T14:01:06.823196+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–ª–Ω—Ü–µ'}
{'time': '2025-07-03T14:01:06.893435+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ ‚Äî –∑–≤–µ–∑–¥–∞'}
{'time': '2025-07-03T14:01:39.001456+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–ª–Ω—Ü–µ'}
{'time': '2025-07-03T14:01:39.056685+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ ‚Äî –∑–≤–µ–∑–¥–∞'}
{'time': '2025-07-03T14:02:31.274350+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T14:02:31.346422+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: "–°–æ–ª–Ω—Ü–µ" ‚Äî "–°–æ–ª–Ω—Ü–µ ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",'}
{'time': '2025-07-03T14:03:11.886234+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T14:03:11.924679+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ'}
{'time': '2025-07-03T14:08:03.549742+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T14:19:50.375023+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç'}
{'time': '2025-07-03T14:19:50.377919+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ'}
{'time': '2025-07-03T14:20:04.288182+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—Ç'}
{'time': '2025-07-03T14:20:04.290529+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ'}
{'time': '2025-07-03T14:20:22.089620+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —Å–æ–ª–Ω—Ü–µ'}
{'time': '2025-07-03T14:20:22.092590+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ ‚Äî –∑–≤–µ–∑–¥–∞'}
{'time': '2025-07-03T14:20:36.560559+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–π —ç–Ω–µ—Ä–≥–∏—è'}
{'time': '2025-07-03T14:20:36.562452+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —ç–Ω–µ—Ä–≥–∏—è ‚Äî —ç—Ç–æ ‚Äî —Å–∏–ª–∞'}
{'time': '2025-07-03T14:39:18.585790+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T14:39:18.588714+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T14:39:58.841712+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T14:39:58.845454+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T14:40:10.322132+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T14:43:38.089877+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T14:43:38.092950+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T14:51:55.102400+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T14:51:55.105262+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T14:52:19.670500+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T15:00:37.908111+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T15:00:37.910936+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T15:00:42.020224+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T15:01:41.285747+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π'}
{'time': '2025-07-03T15:01:41.289259+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T15:01:46.255801+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T15:01:46.257771+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T15:01:50.532660+00:00', 'tag': 'goal', 'thought': '–¶–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}
{'time': '2025-07-03T15:04:00.603242+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T15:04:00.603630+00:00', 'tag': 'goal', 'thought': "–¶–µ–ª—å: –ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∫—Ç–æ —Ç–∞–∫–æ–π —è'"}
{'time': '2025-07-03T15:04:00.606586+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T15:08:41.073970+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T15:08:41.074444+00:00', 'tag': 'goal', 'thought': "–¶–µ–ª—å: –ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∫—Ç–æ —Ç–∞–∫–æ–π —è'"}
{'time': '2025-07-03T15:08:41.077322+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'}
{'time': '2025-07-03T15:08:49.871457+00:00', 'tag': 'goal', 'thought': "–¶–µ–ª—å: –ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∫—Ç–æ —Ç–∞–∫–æ–π —è'"}
{'time': '2025-07-03T15:10:47.308370+00:00', 'tag': 'fact', 'thought': '–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: —è ‚Äî —ç—Ç–æ ‚Äî —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å.'}
{'time': '2025-07-03T15:10:47.312507+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'}
{'time': '2025-07-03T15:10:56.485095+00:00', 'tag': 'question', 'thought': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è'}
{'time': '2025-07-03T15:10:56.485611+00:00', 'tag': 'goal', 'thought': "–¶–µ–ª—å: –ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '–∫—Ç–æ —Ç–∞–∫–æ–π —è'"}
{'time': '2025-07-03T15:10:56.487961+00:00', 'tag': 'response', 'thought': '–Ø –æ—Ç–≤–µ—Ç–∏–ª: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —è ‚Äî —ç—Ç–æ ‚Äî —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å'}


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\data\self_log.txt =====

[2025-06-30T19:30:09.966860+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-06-30T19:36:55.870878+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-06-30T19:39:11.421710+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-06-30T20:07:54.577514+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: –±–ª–∏–º–±–∞–∑–æ–∏–¥ ‚Äî –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª ‚Äî –º–µ—Ç–∞—Å—Ñ–µ—Ä—É
[2025-06-30T20:07:54.581042+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-06-30T20:08:07.083419+00:00] [Trainer] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[2025-06-30T20:08:07.086738+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-06-30T20:18:38.261901+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:32:31.813191+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
[2025-07-03T12:32:31.864192+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:33:03.986050+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è
[2025-07-03T12:34:12.385522+00:00] [Trainer] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[2025-07-03T12:34:12.389431+00:00] [Generator] –û—Ç–≤–µ—Ç: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
[2025-07-03T12:35:34.402406+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: —Å–ª–æ–Ω ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
[2025-07-03T12:35:34.440100+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:36:21.078667+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: –≥—Ä–∏–º–ø—Ñ–∞—Ü–∏–∞–Ω—Å–∫–∏–π ‚Äî –∫–æ–ª–ª–∞–ø—Å ‚Äî 
[2025-07-03T12:36:21.310717+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:38:15.048305+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: –∫–æ—Ç ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî 
[2025-07-03T12:38:15.056041+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:48:11.094888+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è
[2025-07-03T12:48:11.127994+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T12:49:55.924884+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T12:49:55.949206+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T12:50:07.888703+00:00] [Trainer] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[2025-07-03T12:50:07.898802+00:00] [Generator] –û—Ç–≤–µ—Ç: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
[2025-07-03T12:50:20.499460+00:00] [Trainer] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[2025-07-03T12:50:20.512497+00:00] [Generator] –û—Ç–≤–µ—Ç: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
[2025-07-03T12:50:33.332468+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:56:25.371122+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: —ç–Ω–µ—Ä–≥–∏—è ‚Äî —ç—Ç–æ ‚Äî —Å–∏–ª–∞
[2025-07-03T12:56:25.381654+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T12:56:50.501891+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è
[2025-07-03T12:56:50.511498+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T13:34:00.649699+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:36:47.381104+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:37:00.138162+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:39:03.485399+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:47:26.686073+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:47:54.585814+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T13:47:54.629583+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T13:48:03.482615+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ –∫–æ—Ç
[2025-07-03T13:48:03.532767+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T13:48:14.677302+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–µ—Å—Ç
[2025-07-03T13:48:14.716530+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T13:48:50.781091+00:00] [Trainer] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[2025-07-03T13:48:50.836020+00:00] [Generator] –û—Ç–≤–µ—Ç: –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
[2025-07-03T13:48:58.350951+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:50:51.625251+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T13:51:01.350583+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è
[2025-07-03T13:51:01.451355+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T13:55:22.030118+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T13:55:22.048745+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: "–°–æ–ª–Ω—Ü–µ" ‚Äî "–°–æ–ª–Ω—Ü–µ ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",
[2025-07-03T13:55:44.804237+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è
[2025-07-03T13:55:44.864356+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —ç–Ω–µ—Ä–≥–∏—è ‚Äî —ç—Ç–æ ‚Äî —Å–∏–ª–∞
[2025-07-03T14:00:21.153160+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T14:00:21.273730+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: "–°–æ–ª–Ω—Ü–µ" ‚Äî "–°–æ–ª–Ω—Ü–µ ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",
[2025-07-03T14:01:06.822638+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–ª–Ω—Ü–µ
[2025-07-03T14:01:06.892863+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ ‚Äî –∑–≤–µ–∑–¥–∞
[2025-07-03T14:01:38.979652+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–ª–Ω—Ü–µ
[2025-07-03T14:01:39.054020+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ ‚Äî –∑–≤–µ–∑–¥–∞
[2025-07-03T14:02:31.271444+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T14:02:31.318898+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: "–°–æ–ª–Ω—Ü–µ" ‚Äî "–°–æ–ª–Ω—Ü–µ ‚Äî - —ç—Ç–æ –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —Ç–µ–ø–ª–∞ –¥–ª—è –ó–µ–º–ª–∏." ["–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "—Å–æ–ª–Ω—Ü–µ",
[2025-07-03T14:03:11.854979+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T14:03:11.924094+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
[2025-07-03T14:08:03.491744+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T14:19:50.374384+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π –∫–æ—Ç
[2025-07-03T14:19:50.377266+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
[2025-07-03T14:20:04.287362+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—Ç
[2025-07-03T14:20:04.289750+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: –∫–æ—Ç ‚Äî —ç—Ç–æ ‚Äî –∂–∏–≤–æ—Ç–Ω–æ–µ
[2025-07-03T14:20:22.088683+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —Å–æ–ª–Ω—Ü–µ
[2025-07-03T14:20:22.091874+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —Å–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ ‚Äî –∑–≤–µ–∑–¥–∞
[2025-07-03T14:20:36.559806+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–π —ç–Ω–µ—Ä–≥–∏—è
[2025-07-03T14:20:36.561715+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —ç–Ω–µ—Ä–≥–∏—è ‚Äî —ç—Ç–æ ‚Äî —Å–∏–ª–∞
[2025-07-03T14:39:18.585200+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T14:39:18.588049+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T14:39:58.840923+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T14:39:58.844649+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T14:43:38.089229+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T14:43:38.092223+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T14:51:55.101777+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T14:51:55.104700+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T15:00:37.907473+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T15:00:37.910286+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T15:01:41.285028+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π
[2025-07-03T15:01:41.288447+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T15:01:46.252691+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T15:01:46.257062+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T15:04:00.602610+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T15:04:00.605821+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T15:08:41.073368+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T15:08:41.076793+00:00] [Generator] –û—Ç–≤–µ—Ç: –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
[2025-07-03T15:10:47.307926+00:00] [Trainer] –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: –§–∞–∫—Ç: —è ‚Äî —ç—Ç–æ ‚Äî —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å
[2025-07-03T15:10:47.310952+00:00] [Generator] –û—Ç–≤–µ—Ç: –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
[2025-07-03T15:10:56.484215+00:00] [Trainer] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å: –∫—Ç–æ —Ç–∞–∫–æ–π —è
[2025-07-03T15:10:56.487046+00:00] [Generator] –û—Ç–≤–µ—Ç: –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏: —è ‚Äî —ç—Ç–æ ‚Äî —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_classifier.py =====

import pytest
from core.processor.classifier import Classifier
from core.common.types import PhraseType

classifier = Classifier()

def test_classify_command():
    c = Classifier()
    assert c.classify("/run") == PhraseType.COMMAND

def test_classify_unknown():
    c = Classifier()
    assert c.classify("üò≥?üêç") == PhraseType.UNKNOWN

@pytest.mark.parametrize("text,expected", [
    ("–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å?", PhraseType.QUESTION),
    ("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?", PhraseType.QUESTION),
    ("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–æ–ª–Ω—Ü–µ", PhraseType.COMMAND),
    ("–°–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ –∑–≤–µ–∑–¥–∞.", PhraseType.STATEMENT),
    ("???", PhraseType.UNKNOWN),
])
def test_classify(text, expected):
    assert classifier.classify(text) == expected


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_console.py =====

import sys
import os
import builtins
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ tools/
TOOLS_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "tools"))
sys.path.insert(0, TOOLS_PATH)

import console  # —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

def fake_input_generator(inputs):
    def fake_input(_=None):
        return inputs.pop(0) if inputs else "/exit"
    return fake_input

def test_console_commands(monkeypatch):
    inputs = [
        "/test —Å–æ–ª–Ω—Ü–µ —ç—Ç–æ –∑–≤–µ–∑–¥–∞",
        "/mem facts —Å–æ–ª–Ω—Ü–µ",
        "/mem knowledge —Ç–µ—Å—Ç",
        "/add fact —Ç–µ—Å—Ç –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä",
        "/mem export md",
        "/exit"
    ]
    monkeypatch.setattr(builtins, "input", fake_input_generator(inputs))
    console.main()


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_curiosity.py =====

from core.learner.curiosity import Curiosity

def test_add_and_get_questions():
    c = Curiosity()
    c.add_unknown("–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å?")
    questions = c.get_questions()
    assert questions == ["–ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å?'"]

def test_clear():
    c = Curiosity()
    c.add_unknown("abc")
    c.clear()
    assert c.get_questions() == []


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_generator.py =====

import pytest
from core.learner.generator import Generator
from core.processor.classifier import PhraseType


class DummyMemory:
    def __init__(self):
        self.facts = ["–≤–æ–¥–∞ ‚Äî –∂–∏–¥–∫–æ—Å—Ç—å"]

    def search_fact(self, query):
        return [f for f in self.facts if query in f]

    def add_fact(self, subj, pred, obj):
        self.facts.append(f"{subj} ‚Äî {pred} ‚Äî {obj}")
        return True


def test_generate_question():
    g = Generator(memory=DummyMemory())
    result = g.generate_response(PhraseType.QUESTION, ["–≤–æ–¥–∞", "–∂–∏–¥–∫–æ—Å—Ç—å"])
    assert "–≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏" in result or "–Ω–µ –∑–Ω–∞—é" in result


def test_generate_statement():
    mem = DummyMemory()
    g = Generator(memory=mem)
    result = g.generate_response(PhraseType.STATEMENT, ["–≤–æ–¥–∞", "–º–æ–∫—Ä–∞—è"])
    assert "–∑–∞–ø–æ–º–Ω–∏–ª" in result
    assert any("–≤–æ–¥–∞ ‚Äî is ‚Äî –º–æ–∫—Ä–∞—è" in f for f in mem.facts)


def test_generate_unknown():
    g = Generator()
    result = g.generate_response(PhraseType.UNKNOWN, ["—á—Ç–æ-—Ç–æ"])
    assert "–Ω–µ –∑–Ω–∞—é" in result


def test_acknowledgement():
    g = Generator()
    assert g.generate_acknowledgement() == "–ü—Ä–∏–Ω—è—Ç–æ. –ó–∞–ø–∏—Å–∞–ª."


def test_error_generation():
    g = Generator()
    assert "–æ—à–∏–±–∫–∞" in g.generate_error("—Ç–µ—Å—Ç")


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_html_scraper.py =====

import pytest
from core.inputs.html_scraper import HtmlScraper
def test_fetch_empty_html(monkeypatch):
    class FakeResponse:
        text = ""
    def fake_get(*args, **kwargs):
        return FakeResponse()
    monkeypatch.setattr("requests.get", fake_get)
    scraper = HtmlScraper()
    result = scraper.fetch_text("http://test")
    assert result == ""
@pytest.mark.skip(reason="–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ,—Ç–∞–∫ –∫–∞–∫ –¥–æ—Ö—É—è –∂—Ä—ë—Ç")
def test_fetch_text_invalid_url():
    scraper = HtmlScraper()
    result = scraper.fetch_text("http://invalid.url")
    assert isinstance(result, str)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_memory.py =====

import tempfile
import shutil
import os
from core.memory.memory import Memory
from core.common.types import KnowledgeType
from core.common.utils import generate_id, timestamp

def test_find_facts_by_subject(tmp_path):
    memory_file = tmp_path / "memory.json"
    knowledge_file = tmp_path / "knowledge.json"
    memory = Memory(memory_path=str(memory_file), knowledge_path=str(knowledge_file))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—Ç
    memory.add_fact("–≤–æ–¥–∞", "—è–≤–ª—è–µ—Ç—Å—è", "–∂–∏–¥–∫–æ—Å—Ç—å—é")
    
    results = memory.find_facts_by_subject("–≤–æ–¥–∞")
    assert len(results) == 1
    assert results[0].subject == "–≤–æ–¥–∞"


def test_find_facts_by_subject(tmp_path):
    mem = Memory(
        memory_path=str(tmp_path / "memory.json"),
        knowledge_path=str(tmp_path / "knowledge.json")
    )
    mem.add_fact("–≤–æ–¥–∞", "—è–≤–ª—è–µ—Ç—Å—è", "–∂–∏–¥–∫–æ—Å—Ç—å—é")
    results = mem.find_facts_by_subject("–≤–æ–¥–∞")
    assert len(results) == 1

def test_memory_fact_storage():
    tmp_dir = tempfile.mkdtemp()
    memory_file = os.path.join(tmp_dir, "memory.json")
    knowledge_file = os.path.join(tmp_dir, "knowledge_base.json")

    # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–∞–º—è—Ç–∏
    with open(memory_file, "w", encoding="utf-8") as f:
        f.write('{"facts": []}')
    with open(knowledge_file, "w", encoding="utf-8") as f:
        f.write('{"entries": []}')

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    memory = Memory(memory_path=memory_file, knowledge_path=knowledge_file)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç
    memory.add_fact("–¢–µ—Å—Ç", "–µ—Å—Ç—å", "–¥–∞–Ω–Ω—ã–µ", "—Ç–µ—Å—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–∫—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    facts = memory.find_facts_by_subject("–¢–µ—Å—Ç")
    assert len(facts) == 1
    assert facts[0].predicate == "–µ—Å—Ç—å"

    shutil.rmtree(tmp_dir)

def test_memory_knowledge_storage():
    tmp_dir = tempfile.mkdtemp()
    memory_file = os.path.join(tmp_dir, "memory.json")
    knowledge_file = os.path.join(tmp_dir, "knowledge_base.json")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    with open(memory_file, "w", encoding="utf-8") as f:
        f.write('{"facts": []}')
    with open(knowledge_file, "w", encoding="utf-8") as f:
        f.write('{"entries": []}')

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    memory = Memory(memory_path=memory_file, knowledge_path=knowledge_file)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–Ω–∏—è
    memory.add_knowledge("–¢–µ—Å—Ç", "–û–ø–∏—Å–∞–Ω–∏–µ", KnowledgeType.FACT, ["—Ç–µ—Å—Ç"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã
    found = memory.find_knowledge_by_tag("—Ç–µ—Å—Ç")
    assert len(found) == 1

    shutil.rmtree(tmp_dir)


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_meta_journal.py =====

import os
import tempfile
from core.thinker.meta_journal import MetaJournal


def test_record_and_read_entry():
    with tempfile.TemporaryDirectory() as tmp:
        path = os.path.join(tmp, "journal.json")
        journal = MetaJournal(path)
        journal.record_entry("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º—ã—Å–ª–∏", tag="test")

        entries = journal.get_recent_entries()
        assert any("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º—ã—Å–ª–∏" in e for e in entries)
        assert any("'tag': 'test'" in e or 'test' in e for e in entries)


def test_record_fact_and_response():
    with tempfile.TemporaryDirectory() as tmp:
        path = os.path.join(tmp, "journal.json")
        journal = MetaJournal(path)
        journal.record_fact_added("–°–æ–ª–Ω—Ü–µ", "—è–≤–ª—è–µ—Ç—Å—è", "–∑–≤–µ–∑–¥–æ–π")
        journal.record_response("–î–∞, –°–æ–ª–Ω—Ü–µ ‚Äî –∑–≤–µ–∑–¥–∞.")
        entries = journal.get_recent_entries()
        assert any("–°–æ–ª–Ω—Ü–µ" in e for e in entries)
        assert any("–∑–≤–µ–∑–¥–∞" in e for e in entries)
        assert any("–æ—Ç–≤–µ—Ç–∏–ª" in e.lower() for e in entries)


def test_empty_journal():
    with tempfile.TemporaryDirectory() as tmp:
        path = os.path.join(tmp, "empty.json")
        journal = MetaJournal(path)
        assert journal.get_recent_entries() == []


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_parser.py =====

from core.processor.parser import Parser
from core.common.types import Phrase

def test_parse_structure():
    parser = Parser()
    phrase = parser.parse("–°–æ–ª–Ω—Ü–µ —ç—Ç–æ –∑–≤–µ–∑–¥–∞")
    assert isinstance(phrase, Phrase)
    assert phrase.tokens == ["—Å–æ–ª–Ω—Ü–µ", "—ç—Ç–æ", "–∑–≤–µ–∑–¥–∞"]  # ‚¨Ö –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_planner.py =====

import pytest
from core.thinker.planner import Planner

class DummyCuriosity:
    def __init__(self, unknowns=None):
        self._unknowns = unknowns or []

    def get_questions(self):
        return [f"–ß—Ç–æ –∑–Ω–∞—á–∏—Ç: '{x}'" for x in self._unknowns]

def test_plan_with_phrases():
    curiosity = DummyCuriosity(["–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–µ—Ä–≥–∏—è?", "–ü–æ—á–µ–º—É –Ω–µ–±–æ —Å–∏–Ω–µ–µ?"])
    planner = Planner(curiosity=curiosity)
    plan = planner.plan()
    assert any("—á—Ç–æ –∑–Ω–∞—á–∏—Ç" in p.lower() for p in plan)
    assert len(plan) == 2


def test_plan_empty():
    curiosity = DummyCuriosity([])
    planner = Planner(curiosity=curiosity)
    plan = planner.plan()
    assert plan == ["–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."]


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_reinforce.py =====

from core.learner.reinforce import Reinforce

def test_reinforce_fact():
    r = Reinforce()
    r.reinforce_fact("f123")
    assert r.get_reward("f123") == 1
    r.reinforce_fact("f123")
    assert r.get_reward("f123") == 2

def test_no_reward():
    r = Reinforce()
    assert r.get_reward("unknown") == 0


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_rules.py =====

from core.learner.rules import rules_engine
from core.common.types import PhraseType

def test_long_fact_rule():
    result = rules_engine.apply_rules(PhraseType.STATEMENT, ["—Å–æ–ª–Ω—Ü–µ", "—è–≤–ª—è–µ—Ç—Å—è", "–∑–≤–µ–∑–¥–æ–π"], "–°–æ–ª–Ω—Ü–µ —è–≤–ª—è–µ—Ç—Å—è –∑–≤–µ–∑–¥–æ–π")
    assert result["type"] == "fact"
    assert result["subject"] == "—Å–æ–ª–Ω—Ü–µ"

def test_short_fact_rule():
    result = rules_engine.apply_rules(PhraseType.STATEMENT, ["–≤–æ–¥–∞", "–º–æ–∫—Ä–∞—è"], "–í–æ–¥–∞ –º–æ–∫—Ä–∞—è")
    assert result["type"] == "fact"
    assert result["subject"] == "–≤–æ–¥–∞"

def test_question_rule():
    result = rules_engine.apply_rules(PhraseType.QUESTION, ["—á—Ç–æ", "—Ç–∞–∫–æ–µ", "–≤–æ–¥–∞"], "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–¥–∞?")
    assert result["type"] == "question"
    assert result["text"] == "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–¥–∞?"

def test_no_match_rule():
    result = rules_engine.apply_rules(PhraseType.UNKNOWN, ["..."], "???")
    assert result is None


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_run.py =====

import builtins
import pytest
from run import main

def fake_input_generator(inputs):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤–º–µ—Å—Ç–æ input()"""
    def fake_input(_=None):
        return inputs.pop(0) if inputs else "/exit"
    return fake_input

def test_run_main(monkeypatch):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    inputs = [
        "–°–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ –∑–≤–µ–∑–¥–∞",  # —Ñ—Ä–∞–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        "/exit"                # –≤—ã—Ö–æ–¥
    ]
    monkeypatch.setattr(builtins, "input", fake_input_generator(inputs))
    main()  # –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º main(), –±–µ–∑ assert ‚Äî —Ç–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–±–æ–µ–≤


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_self_reporter.py =====

import os
import tempfile
from core.thinker.self_report import SelfReporter


def test_log_action_and_retrieve():
    with tempfile.TemporaryDirectory() as tmp:
        path = os.path.join(tmp, "log.txt")
        sr = SelfReporter(log_path=path)
        sr.log_action("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏", source="Test")

        logs = sr.get_recent_logs()
        assert any("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏" in line for line in logs)
        assert any("Test" in line for line in logs)


def test_log_file_created():
    with tempfile.TemporaryDirectory() as tmp:
        path = os.path.join(tmp, "log.txt")
        sr = SelfReporter(log_path=path)
        sr.log_action("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
        assert os.path.exists(path)


def test_empty_log():
    with tempfile.TemporaryDirectory() as tmp:
        path = os.path.join(tmp, "empty.txt")
        sr = SelfReporter(log_path=path)
        logs = sr.get_recent_logs()
        assert logs == []


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_spellchecker.py =====

from core.processor.spellchecker import SpellCorrector

def test_correct_known_word():
    sc = SpellCorrector()
    assert sc.correct_tokens(["–ø–æ–º–æ—â–Ω—ã–∫"]) == ["–ø–æ–º–æ—â–Ω–∏–∫"]

def test_does_not_change_correct():
    sc = SpellCorrector()
    assert sc.correct_tokens(["–¥—Ä—É–∑—å—è"]) == ["–¥—Ä—É–∑—å—è"]

def test_mixed_batch():
    sc = SpellCorrector()
    assert sc.correct_tokens(["–ª—É—á—à—ã–µ", "–ø–æ–º–æ—â–Ω—ã–∫", "–º—ã"]) == ["–ª—É—á—à–µ", "–ø–æ–º–æ—â–Ω–∏–∫", "–º—ã"]


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_text_input.py =====

from core.inputs.text_input import TextInput

def test_text_input_stub():
    ti = TextInput()
    assert hasattr(ti, "get_input")


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_tokenizer.py =====

import pytest
from core.processor.tokenizer import Tokenizer

tokenizer = Tokenizer()

def test_count_tokens():
    t = Tokenizer()
    assert t.count_tokens("–≠—Ç–æ —Ç–µ—Å—Ç") == 2

def test_preview_tokens(capsys):
    t = Tokenizer()
    t.preview_tokens("–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞")
    captured = capsys.readouterr()
    assert "–ø—Ä–∏–º–µ—Ä" in captured.out.lower()

def test_clean_text():
    from core.common.utils import clean_text
    assert clean_text("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!!!") == "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä"

def test_split_symbols():
    t = Tokenizer()
    result = t.tokenize("–¢—ã ‚Äî –º–æ–π –¥—Ä—É–≥.")
    assert "–¥—Ä—É–≥" in result

def test_tokenize_basic():
    text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
    tokens = tokenizer.tokenize(text)
    assert tokens == ["–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä"]

def test_tokenize_empty():
    assert tokenizer.tokenize("") == []

def test_tokenize_whitespace():
    assert tokenizer.tokenize("   \n\t") == []


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\test_utils.py =====

from core.common.utils import clean_text, normalize_whitespace, generate_id, timestamp
import os
from core.common.utils import save_json, load_json

def test_save_and_load_json(tmp_path):
    filepath = tmp_path / "test.json"
    data = {"a": 1}
    save_json(str(filepath), data)
    loaded = load_json(str(filepath))
    assert loaded == data

def test_clean_text():
    text = " –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!!! "
    assert clean_text(text) == "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä"

def test_normalize_whitespace():
    text = "—ç—Ç–æ   —Ç–µ—Å—Ç\n\n—Å—Ç—Ä–æ–∫–∏"
    assert normalize_whitespace(text) == "—ç—Ç–æ —Ç–µ—Å—Ç —Å—Ç—Ä–æ–∫–∏"

def test_generate_id_unique():
    id1 = generate_id()
    id2 = generate_id()
    assert id1 != id2 and isinstance(id1, str)

def test_timestamp_format():
    ts = timestamp()
    assert "T" in ts  # ISO —Ñ–æ—Ä–º–∞—Ç


===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tests\__init__.py =====



===== FILE: C:\Users\Brazers\Desktop\Endi-IA\P v0.2-r-b\tools\console.py =====

import sys, os, csv, subprocess, traceback
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from core.memory.memory import Memory
from core.processor.tokenizer import Tokenizer
from core.processor.classifier import Classifier
from core.common.types import KnowledgeType
from core.learner.trainer import Trainer
from run import main as run_main

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ requirements.txt."""
    if not os.path.exists('requirements.txt'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª requirements.txt!")
        return
    print("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])

def resource_path(path):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), "..", path)

memory = Memory(
    memory_path=resource_path("data/memory.json"),
    knowledge_path=resource_path("data/knowledge_base.json")
)
tokenizer = Tokenizer()
classifier = Classifier()
trainer = Trainer()

HELP = """
üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è Dev Console (–∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /):

  üìÑ –û–±—â–∏–µ:
    /help                    ‚Äî –ø–æ–º–æ—â—å
    /exit                    ‚Äî –≤—ã—Ö–æ–¥
    /run                     ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å run.py

  üì¶ –ü–∞–º—è—Ç—å:
    /mem facts [—Å—É–±—ä–µ–∫—Ç]     ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é: –ø–æ —Å—É–±—ä–µ–∫—Ç—É)
    /mem knowledge [—Ç–µ–≥]     ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é: –ø–æ —Ç–µ–≥—É)
    /mem export md|csv       ‚Äî —ç–∫—Å–ø–æ—Ä—Ç

  ‚ûï –ò–∑–º–µ–Ω–µ–Ω–∏—è:
    /add fact subj pred obj [source] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç
    /del fact id                     ‚Äî —É–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—Ç

  üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:
    /plan                   ‚Äî —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
    /meta                   ‚Äî –º–µ—Ç–∞-–∂—É—Ä–Ω–∞–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    /goals                  ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–ª–∏
    /log                    ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

  üß™ –¢–µ—Å—Ç:
    /test —Ñ—Ä–∞–∑–∞ ‚Äî —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è + –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
"""

def print_facts(subj=None):
    facts = [f for f in memory.facts if not subj or subj.lower() in f.subject.lower()]
    if not facts:
        print("‚ùå –§–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for f in facts:
        print(f"- ID:{f.id} | {f.subject} ‚Äî {f.predicate} ‚Äî {f.obj} | from: {f.source or 'n/a'}")

def print_knowledge(tag=None):
    entries = [k for k in memory.knowledge if not tag or tag.lower() in map(str.lower, k.tags)]
    if not entries:
        print("‚ùå –ó–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for k in entries:
        print(f"- ID:{k.id} | {k.title} [{k.type.value}] ‚Äî {', '.join(k.tags)}")
        print(f"  > {k.content}")

def export_memory(fmt):
    if fmt == "md":
        with open("memory_report.md", "w", encoding="utf-8") as f:
            f.write("# üß† –ü–∞–º—è—Ç—å –ò–ò\n\n## üìå –§–∞–∫—Ç—ã\n\n")
            for fact in memory.facts:
                f.write(f"- **{fact.subject}** ‚Äî *{fact.predicate}* ‚Äî {fact.obj}\n")
                f.write(f"  –ò—Å—Ç–æ—á–Ω–∏–∫: `{fact.source}`\n  –í—Ä–µ–º—è: `{fact.timestamp}`\n\n")
            f.write("## üìö –ó–Ω–∞–Ω–∏—è\n\n")
            for k in memory.knowledge:
                f.write(f"- **{k.title}** ({k.type.value})\n  > {k.content}\n")
                f.write(f"  –¢–µ–≥–∏: {', '.join(k.tags)}\n  –í—Ä–µ–º—è: `{k.created}`\n\n")
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ memory_report.md")
    elif fmt == "csv":
        with open("memory_report.csv", "w", encoding="utf-8", newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["Type", "ID", "Subject/Title", "Predicate", "Object/Content", "Source/Tags", "Timestamp/Created"])
            for fct in memory.facts:
                writer.writerow(["Fact", fct.id, fct.subject, fct.predicate, fct.obj, fct.source or "", fct.timestamp])
            for k in memory.knowledge:
                writer.writerow(["Knowledge", k.id, k.title, "", k.content, ";".join(k.tags), k.created])
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ memory_report.csv")
    else:
        print("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å md –∏–ª–∏ csv.")

def add_fact(args):
    if len(args) < 3:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è: subj pred obj [source]")
        return
    subj, pred, *rest = args
    obj = " ".join(rest[:-1]) if len(rest) > 1 else rest[0]
    source = rest[-1] if len(rest) > 1 else None
    memory.add_fact(subj, pred, obj, source)
    print(f"‚úÖ –§–∞–∫—Ç: {subj} ‚Äî {pred} ‚Äî {obj}")

def del_fact(args):
    if len(args) != 1:
        print("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID")
        return
    fid = args[0]
    orig = len(memory.facts)
    memory.facts = [f for f in memory.facts if f.id != fid]
    memory._save_facts()
    print("‚úÖ –£–¥–∞–ª–µ–Ω–æ" if len(memory.facts) < orig else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")

def handle_test(phrase):
    tokens = tokenizer.tokenize(phrase)
    ptype = classifier.classify(phrase)
    print(f"[Test] –¢–∏–ø: {ptype.name}")
    print(f"[Test] –¢–æ–∫–µ–Ω—ã: {tokens}")

def handle_journal_commands(cmd):
    if cmd == "plan":
        print("\nüìå –¶–µ–ª–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:")
        for task in trainer.plan_learning():
            print("-", task)

    elif cmd == "meta":
        print("\nüß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:")
        entries = trainer.journal.get_recent_entries()
        for e in entries:
            try:
                tag = e.split("'tag': '")[1].split("'")[0]
                thought = e.split("'thought': '")[1].rsplit("'", 1)[0]
                print(f"[{tag}] {thought}")
            except:
                print(e.strip())

    elif cmd == "goals":
        print("\nüéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–ª–∏:")
        goals = [e for e in trainer.journal.get_recent_entries(20) if "'goal'" in e or '–¶–µ–ª—å' in e]
        for g in goals[-5:]:
            try:
                thought = g.split("'thought': '")[1].rsplit("'", 1)[0]
                print(f"[goal] {thought}")
            except:
                print(g.strip())

    elif cmd == "log":
        print("\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        for line in trainer.reporter.get_recent_logs():
            print(line.strip())


def main():
    print(HELP)
    while True:
        try:
            line = input(" > ").strip()
            if not line:
                continue
            if not line.startswith("/"):
                trainer.process_text(line)
                continue

            parts = line[1:].split()
            cmd, args = parts[0].lower(), parts[1:]

            match cmd:
                case "exit": break
                case "help": print(HELP)
                case "run":
                    run_path = resource_path("run.py")
                    if os.path.exists(run_path):
                        subprocess.run([sys.executable, run_path])
                        memory.facts = memory._load_facts()
                        memory.knowledge = memory._load_knowledge()
                    else:
                        print(f"‚ö†Ô∏è run.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {run_path}")
                case "mem":
                    if not args: print("‚ö†Ô∏è –£—Ç–æ—á–Ω–∏—Ç–µ: facts, knowledge, export"); continue
                    subcmd = args[0].lower()
                    if subcmd == "facts": print_facts(args[1] if len(args) > 1 else None)
                    elif subcmd == "knowledge": print_knowledge(args[1] if len(args) > 1 else None)
                    elif subcmd == "export": export_memory(args[1] if len(args) > 1 else "")
                    else: print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ mem.")
                case "add" if args and args[0] == "fact": add_fact(args[1:])
                case "del" if args and args[0] == "fact": del_fact(args[1:])
                case "test": handle_test(" ".join(args))
                case "plan" | "meta" | "goals" | "log": handle_journal_commands(cmd)
                case _: print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /help –¥–ª—è —Å–ø–∏—Å–∫–∞.")
        except KeyboardInterrupt:
            print("\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            traceback.print_exc()

if __name__ == "__main__":
    main()
